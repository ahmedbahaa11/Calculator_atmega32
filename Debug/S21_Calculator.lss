
S21_Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  000028ee  00002962  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000255c  00000000  00000000  000029c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000011a8  00000000  00000000  00004f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000060c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00006208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00006378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000a049  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a817  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 79 10 	call	0x20f2	; 0x20f2 <main>
      7a:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a1 ea       	ldi	r26, 0xA1	; 161
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	81 ea       	ldi	r24, 0xA1	; 161
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 4e 14 	jmp	0x289c	; 0x289c <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_voidSetPinDirection>:
/* Fun. Argument2: Copy_u8PinNumber { PIN0,PIN1,PIN3,PIN4,PIN5,PIN6,PIN7 }                      */
/* Fun. Argument3: Copy_u8Direction { INPUT,OUTPUT }                                            */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void DIO_voidSetPinDirection (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber, u8 Copy_u8Direction )
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	29 97       	sbiw	r28, 0x09	; 9
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	6a 83       	std	Y+2, r22	; 0x02
     b4e:	4b 83       	std	Y+3, r20	; 0x03
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD || Copy_u8PinNumber > PIN7 )
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	84 30       	cpi	r24, 0x04	; 4
     b54:	08 f0       	brcs	.+2      	; 0xb58 <DIO_voidSetPinDirection+0x22>
     b56:	f6 c0       	rjmp	.+492    	; 0xd44 <DIO_voidSetPinDirection+0x20e>
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	88 30       	cpi	r24, 0x08	; 8
     b5c:	08 f0       	brcs	.+2      	; 0xb60 <DIO_voidSetPinDirection+0x2a>
     b5e:	f2 c0       	rjmp	.+484    	; 0xd44 <DIO_voidSetPinDirection+0x20e>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Direction)
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	28 2f       	mov	r18, r24
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	39 87       	std	Y+9, r19	; 0x09
     b68:	28 87       	std	Y+8, r18	; 0x08
     b6a:	88 85       	ldd	r24, Y+8	; 0x08
     b6c:	99 85       	ldd	r25, Y+9	; 0x09
     b6e:	00 97       	sbiw	r24, 0x00	; 0
     b70:	39 f0       	breq	.+14     	; 0xb80 <DIO_voidSetPinDirection+0x4a>
     b72:	28 85       	ldd	r18, Y+8	; 0x08
     b74:	39 85       	ldd	r19, Y+9	; 0x09
     b76:	21 30       	cpi	r18, 0x01	; 1
     b78:	31 05       	cpc	r19, r1
     b7a:	09 f4       	brne	.+2      	; 0xb7e <DIO_voidSetPinDirection+0x48>
     b7c:	75 c0       	rjmp	.+234    	; 0xc68 <DIO_voidSetPinDirection+0x132>
     b7e:	e2 c0       	rjmp	.+452    	; 0xd44 <DIO_voidSetPinDirection+0x20e>
        {
            case INPUT :    switch(Copy_u8PortNumber)
     b80:	89 81       	ldd	r24, Y+1	; 0x01
     b82:	28 2f       	mov	r18, r24
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	3f 83       	std	Y+7, r19	; 0x07
     b88:	2e 83       	std	Y+6, r18	; 0x06
     b8a:	8e 81       	ldd	r24, Y+6	; 0x06
     b8c:	9f 81       	ldd	r25, Y+7	; 0x07
     b8e:	81 30       	cpi	r24, 0x01	; 1
     b90:	91 05       	cpc	r25, r1
     b92:	59 f1       	breq	.+86     	; 0xbea <DIO_voidSetPinDirection+0xb4>
     b94:	2e 81       	ldd	r18, Y+6	; 0x06
     b96:	3f 81       	ldd	r19, Y+7	; 0x07
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	2c f4       	brge	.+10     	; 0xba8 <DIO_voidSetPinDirection+0x72>
     b9e:	8e 81       	ldd	r24, Y+6	; 0x06
     ba0:	9f 81       	ldd	r25, Y+7	; 0x07
     ba2:	00 97       	sbiw	r24, 0x00	; 0
     ba4:	69 f0       	breq	.+26     	; 0xbc0 <DIO_voidSetPinDirection+0x8a>
     ba6:	ce c0       	rjmp	.+412    	; 0xd44 <DIO_voidSetPinDirection+0x20e>
     ba8:	2e 81       	ldd	r18, Y+6	; 0x06
     baa:	3f 81       	ldd	r19, Y+7	; 0x07
     bac:	22 30       	cpi	r18, 0x02	; 2
     bae:	31 05       	cpc	r19, r1
     bb0:	89 f1       	breq	.+98     	; 0xc14 <DIO_voidSetPinDirection+0xde>
     bb2:	8e 81       	ldd	r24, Y+6	; 0x06
     bb4:	9f 81       	ldd	r25, Y+7	; 0x07
     bb6:	83 30       	cpi	r24, 0x03	; 3
     bb8:	91 05       	cpc	r25, r1
     bba:	09 f4       	brne	.+2      	; 0xbbe <DIO_voidSetPinDirection+0x88>
     bbc:	40 c0       	rjmp	.+128    	; 0xc3e <DIO_voidSetPinDirection+0x108>
     bbe:	c2 c0       	rjmp	.+388    	; 0xd44 <DIO_voidSetPinDirection+0x20e>
                            {
                                case PORTA :    CLEAR_BIT( DDRA_REG ,Copy_u8PinNumber );    break;       
     bc0:	aa e3       	ldi	r26, 0x3A	; 58
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	ea e3       	ldi	r30, 0x3A	; 58
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	48 2f       	mov	r20, r24
     bcc:	8a 81       	ldd	r24, Y+2	; 0x02
     bce:	28 2f       	mov	r18, r24
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	02 2e       	mov	r0, r18
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <DIO_voidSetPinDirection+0xa8>
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	0a 94       	dec	r0
     be0:	e2 f7       	brpl	.-8      	; 0xbda <DIO_voidSetPinDirection+0xa4>
     be2:	80 95       	com	r24
     be4:	84 23       	and	r24, r20
     be6:	8c 93       	st	X, r24
     be8:	ad c0       	rjmp	.+346    	; 0xd44 <DIO_voidSetPinDirection+0x20e>
                                case PORTB :    CLEAR_BIT( DDRB_REG ,Copy_u8PinNumber );    break;
     bea:	a7 e3       	ldi	r26, 0x37	; 55
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e7 e3       	ldi	r30, 0x37	; 55
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	48 2f       	mov	r20, r24
     bf6:	8a 81       	ldd	r24, Y+2	; 0x02
     bf8:	28 2f       	mov	r18, r24
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	02 2e       	mov	r0, r18
     c02:	02 c0       	rjmp	.+4      	; 0xc08 <DIO_voidSetPinDirection+0xd2>
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	0a 94       	dec	r0
     c0a:	e2 f7       	brpl	.-8      	; 0xc04 <DIO_voidSetPinDirection+0xce>
     c0c:	80 95       	com	r24
     c0e:	84 23       	and	r24, r20
     c10:	8c 93       	st	X, r24
     c12:	98 c0       	rjmp	.+304    	; 0xd44 <DIO_voidSetPinDirection+0x20e>
                                case PORTC :    CLEAR_BIT( DDRC_REG ,Copy_u8PinNumber );    break;
     c14:	a4 e3       	ldi	r26, 0x34	; 52
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e4 e3       	ldi	r30, 0x34	; 52
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	48 2f       	mov	r20, r24
     c20:	8a 81       	ldd	r24, Y+2	; 0x02
     c22:	28 2f       	mov	r18, r24
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	02 2e       	mov	r0, r18
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <DIO_voidSetPinDirection+0xfc>
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	0a 94       	dec	r0
     c34:	e2 f7       	brpl	.-8      	; 0xc2e <DIO_voidSetPinDirection+0xf8>
     c36:	80 95       	com	r24
     c38:	84 23       	and	r24, r20
     c3a:	8c 93       	st	X, r24
     c3c:	83 c0       	rjmp	.+262    	; 0xd44 <DIO_voidSetPinDirection+0x20e>
                                case PORTD :    CLEAR_BIT( DDRD_REG ,Copy_u8PinNumber );    break;
     c3e:	a1 e3       	ldi	r26, 0x31	; 49
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	e1 e3       	ldi	r30, 0x31	; 49
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	48 2f       	mov	r20, r24
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	28 2f       	mov	r18, r24
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	02 2e       	mov	r0, r18
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <DIO_voidSetPinDirection+0x126>
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	0a 94       	dec	r0
     c5e:	e2 f7       	brpl	.-8      	; 0xc58 <DIO_voidSetPinDirection+0x122>
     c60:	80 95       	com	r24
     c62:	84 23       	and	r24, r20
     c64:	8c 93       	st	X, r24
     c66:	6e c0       	rjmp	.+220    	; 0xd44 <DIO_voidSetPinDirection+0x20e>
                                default    :                                                break;
                            }
                            break;
            case OUTPUT :   switch(Copy_u8PortNumber)
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	28 2f       	mov	r18, r24
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	3d 83       	std	Y+5, r19	; 0x05
     c70:	2c 83       	std	Y+4, r18	; 0x04
     c72:	8c 81       	ldd	r24, Y+4	; 0x04
     c74:	9d 81       	ldd	r25, Y+5	; 0x05
     c76:	81 30       	cpi	r24, 0x01	; 1
     c78:	91 05       	cpc	r25, r1
     c7a:	49 f1       	breq	.+82     	; 0xcce <DIO_voidSetPinDirection+0x198>
     c7c:	2c 81       	ldd	r18, Y+4	; 0x04
     c7e:	3d 81       	ldd	r19, Y+5	; 0x05
     c80:	22 30       	cpi	r18, 0x02	; 2
     c82:	31 05       	cpc	r19, r1
     c84:	2c f4       	brge	.+10     	; 0xc90 <DIO_voidSetPinDirection+0x15a>
     c86:	8c 81       	ldd	r24, Y+4	; 0x04
     c88:	9d 81       	ldd	r25, Y+5	; 0x05
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	61 f0       	breq	.+24     	; 0xca6 <DIO_voidSetPinDirection+0x170>
     c8e:	5a c0       	rjmp	.+180    	; 0xd44 <DIO_voidSetPinDirection+0x20e>
     c90:	2c 81       	ldd	r18, Y+4	; 0x04
     c92:	3d 81       	ldd	r19, Y+5	; 0x05
     c94:	22 30       	cpi	r18, 0x02	; 2
     c96:	31 05       	cpc	r19, r1
     c98:	71 f1       	breq	.+92     	; 0xcf6 <DIO_voidSetPinDirection+0x1c0>
     c9a:	8c 81       	ldd	r24, Y+4	; 0x04
     c9c:	9d 81       	ldd	r25, Y+5	; 0x05
     c9e:	83 30       	cpi	r24, 0x03	; 3
     ca0:	91 05       	cpc	r25, r1
     ca2:	e9 f1       	breq	.+122    	; 0xd1e <DIO_voidSetPinDirection+0x1e8>
     ca4:	4f c0       	rjmp	.+158    	; 0xd44 <DIO_voidSetPinDirection+0x20e>
                            {
                                case PORTA :    SET_BIT( DDRA_REG ,Copy_u8PinNumber );      break;
     ca6:	aa e3       	ldi	r26, 0x3A	; 58
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	ea e3       	ldi	r30, 0x3A	; 58
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	48 2f       	mov	r20, r24
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	02 2e       	mov	r0, r18
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <DIO_voidSetPinDirection+0x18e>
     cc0:	88 0f       	add	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	0a 94       	dec	r0
     cc6:	e2 f7       	brpl	.-8      	; 0xcc0 <DIO_voidSetPinDirection+0x18a>
     cc8:	84 2b       	or	r24, r20
     cca:	8c 93       	st	X, r24
     ccc:	3b c0       	rjmp	.+118    	; 0xd44 <DIO_voidSetPinDirection+0x20e>
                                case PORTB :    SET_BIT( DDRB_REG ,Copy_u8PinNumber );      break;
     cce:	a7 e3       	ldi	r26, 0x37	; 55
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e7 e3       	ldi	r30, 0x37	; 55
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	48 2f       	mov	r20, r24
     cda:	8a 81       	ldd	r24, Y+2	; 0x02
     cdc:	28 2f       	mov	r18, r24
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	02 2e       	mov	r0, r18
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <DIO_voidSetPinDirection+0x1b6>
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	0a 94       	dec	r0
     cee:	e2 f7       	brpl	.-8      	; 0xce8 <DIO_voidSetPinDirection+0x1b2>
     cf0:	84 2b       	or	r24, r20
     cf2:	8c 93       	st	X, r24
     cf4:	27 c0       	rjmp	.+78     	; 0xd44 <DIO_voidSetPinDirection+0x20e>
                                case PORTC :    SET_BIT( DDRC_REG ,Copy_u8PinNumber );      break;
     cf6:	a4 e3       	ldi	r26, 0x34	; 52
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e4 e3       	ldi	r30, 0x34	; 52
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	48 2f       	mov	r20, r24
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	02 2e       	mov	r0, r18
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <DIO_voidSetPinDirection+0x1de>
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	0a 94       	dec	r0
     d16:	e2 f7       	brpl	.-8      	; 0xd10 <DIO_voidSetPinDirection+0x1da>
     d18:	84 2b       	or	r24, r20
     d1a:	8c 93       	st	X, r24
     d1c:	13 c0       	rjmp	.+38     	; 0xd44 <DIO_voidSetPinDirection+0x20e>
                                case PORTD :    SET_BIT( DDRD_REG ,Copy_u8PinNumber );      break;
     d1e:	a1 e3       	ldi	r26, 0x31	; 49
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e1 e3       	ldi	r30, 0x31	; 49
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	48 2f       	mov	r20, r24
     d2a:	8a 81       	ldd	r24, Y+2	; 0x02
     d2c:	28 2f       	mov	r18, r24
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	02 2e       	mov	r0, r18
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <DIO_voidSetPinDirection+0x206>
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	0a 94       	dec	r0
     d3e:	e2 f7       	brpl	.-8      	; 0xd38 <DIO_voidSetPinDirection+0x202>
     d40:	84 2b       	or	r24, r20
     d42:	8c 93       	st	X, r24
                            break;
            default :       break;
                            
        }
    }
}
     d44:	29 96       	adiw	r28, 0x09	; 9
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	cd bf       	out	0x3d, r28	; 61
     d50:	cf 91       	pop	r28
     d52:	df 91       	pop	r29
     d54:	08 95       	ret

00000d56 <DIO_voidSetPortDirection>:
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                                */
/* Fun. Argument2: Copy_u8Direction { INPUT,OUTPUT }                                            */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void DIO_voidSetPortDirection (u8 Copy_u8PortNumber, u8 Copy_u8Direction )
{
     d56:	df 93       	push	r29
     d58:	cf 93       	push	r28
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
     d5e:	28 97       	sbiw	r28, 0x08	; 8
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	89 83       	std	Y+1, r24	; 0x01
     d6c:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD )
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	84 30       	cpi	r24, 0x04	; 4
     d72:	08 f0       	brcs	.+2      	; 0xd76 <DIO_voidSetPortDirection+0x20>
     d74:	70 c0       	rjmp	.+224    	; 0xe56 <DIO_voidSetPortDirection+0x100>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Direction)
     d76:	8a 81       	ldd	r24, Y+2	; 0x02
     d78:	28 2f       	mov	r18, r24
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	38 87       	std	Y+8, r19	; 0x08
     d7e:	2f 83       	std	Y+7, r18	; 0x07
     d80:	8f 81       	ldd	r24, Y+7	; 0x07
     d82:	98 85       	ldd	r25, Y+8	; 0x08
     d84:	00 97       	sbiw	r24, 0x00	; 0
     d86:	31 f0       	breq	.+12     	; 0xd94 <DIO_voidSetPortDirection+0x3e>
     d88:	2f 81       	ldd	r18, Y+7	; 0x07
     d8a:	38 85       	ldd	r19, Y+8	; 0x08
     d8c:	21 30       	cpi	r18, 0x01	; 1
     d8e:	31 05       	cpc	r19, r1
     d90:	81 f1       	breq	.+96     	; 0xdf2 <DIO_voidSetPortDirection+0x9c>
     d92:	61 c0       	rjmp	.+194    	; 0xe56 <DIO_voidSetPortDirection+0x100>
        {
            case INPUT :    switch(Copy_u8PortNumber)
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	3e 83       	std	Y+6, r19	; 0x06
     d9c:	2d 83       	std	Y+5, r18	; 0x05
     d9e:	8d 81       	ldd	r24, Y+5	; 0x05
     da0:	9e 81       	ldd	r25, Y+6	; 0x06
     da2:	81 30       	cpi	r24, 0x01	; 1
     da4:	91 05       	cpc	r25, r1
     da6:	c9 f0       	breq	.+50     	; 0xdda <DIO_voidSetPortDirection+0x84>
     da8:	2d 81       	ldd	r18, Y+5	; 0x05
     daa:	3e 81       	ldd	r19, Y+6	; 0x06
     dac:	22 30       	cpi	r18, 0x02	; 2
     dae:	31 05       	cpc	r19, r1
     db0:	2c f4       	brge	.+10     	; 0xdbc <DIO_voidSetPortDirection+0x66>
     db2:	8d 81       	ldd	r24, Y+5	; 0x05
     db4:	9e 81       	ldd	r25, Y+6	; 0x06
     db6:	00 97       	sbiw	r24, 0x00	; 0
     db8:	61 f0       	breq	.+24     	; 0xdd2 <DIO_voidSetPortDirection+0x7c>
     dba:	4d c0       	rjmp	.+154    	; 0xe56 <DIO_voidSetPortDirection+0x100>
     dbc:	2d 81       	ldd	r18, Y+5	; 0x05
     dbe:	3e 81       	ldd	r19, Y+6	; 0x06
     dc0:	22 30       	cpi	r18, 0x02	; 2
     dc2:	31 05       	cpc	r19, r1
     dc4:	71 f0       	breq	.+28     	; 0xde2 <DIO_voidSetPortDirection+0x8c>
     dc6:	8d 81       	ldd	r24, Y+5	; 0x05
     dc8:	9e 81       	ldd	r25, Y+6	; 0x06
     dca:	83 30       	cpi	r24, 0x03	; 3
     dcc:	91 05       	cpc	r25, r1
     dce:	69 f0       	breq	.+26     	; 0xdea <DIO_voidSetPortDirection+0x94>
     dd0:	42 c0       	rjmp	.+132    	; 0xe56 <DIO_voidSetPortDirection+0x100>
                            {
                                case PORTA :    DDRA_REG = 0x00 ;   break;
     dd2:	ea e3       	ldi	r30, 0x3A	; 58
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	10 82       	st	Z, r1
     dd8:	3e c0       	rjmp	.+124    	; 0xe56 <DIO_voidSetPortDirection+0x100>
                                case PORTB :    DDRB_REG = 0x00 ;   break;
     dda:	e7 e3       	ldi	r30, 0x37	; 55
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	10 82       	st	Z, r1
     de0:	3a c0       	rjmp	.+116    	; 0xe56 <DIO_voidSetPortDirection+0x100>
                                case PORTC :    DDRC_REG = 0x00 ;   break;
     de2:	e4 e3       	ldi	r30, 0x34	; 52
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	10 82       	st	Z, r1
     de8:	36 c0       	rjmp	.+108    	; 0xe56 <DIO_voidSetPortDirection+0x100>
                                case PORTD :    DDRD_REG = 0x00 ;   break;
     dea:	e1 e3       	ldi	r30, 0x31	; 49
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	10 82       	st	Z, r1
     df0:	32 c0       	rjmp	.+100    	; 0xe56 <DIO_voidSetPortDirection+0x100>
                                default    :                        break;
                            }
                            break;
            case OUTPUT :   switch(Copy_u8PortNumber)
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	3c 83       	std	Y+4, r19	; 0x04
     dfa:	2b 83       	std	Y+3, r18	; 0x03
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	9c 81       	ldd	r25, Y+4	; 0x04
     e00:	81 30       	cpi	r24, 0x01	; 1
     e02:	91 05       	cpc	r25, r1
     e04:	d1 f0       	breq	.+52     	; 0xe3a <DIO_voidSetPortDirection+0xe4>
     e06:	2b 81       	ldd	r18, Y+3	; 0x03
     e08:	3c 81       	ldd	r19, Y+4	; 0x04
     e0a:	22 30       	cpi	r18, 0x02	; 2
     e0c:	31 05       	cpc	r19, r1
     e0e:	2c f4       	brge	.+10     	; 0xe1a <DIO_voidSetPortDirection+0xc4>
     e10:	8b 81       	ldd	r24, Y+3	; 0x03
     e12:	9c 81       	ldd	r25, Y+4	; 0x04
     e14:	00 97       	sbiw	r24, 0x00	; 0
     e16:	61 f0       	breq	.+24     	; 0xe30 <DIO_voidSetPortDirection+0xda>
     e18:	1e c0       	rjmp	.+60     	; 0xe56 <DIO_voidSetPortDirection+0x100>
     e1a:	2b 81       	ldd	r18, Y+3	; 0x03
     e1c:	3c 81       	ldd	r19, Y+4	; 0x04
     e1e:	22 30       	cpi	r18, 0x02	; 2
     e20:	31 05       	cpc	r19, r1
     e22:	81 f0       	breq	.+32     	; 0xe44 <DIO_voidSetPortDirection+0xee>
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	9c 81       	ldd	r25, Y+4	; 0x04
     e28:	83 30       	cpi	r24, 0x03	; 3
     e2a:	91 05       	cpc	r25, r1
     e2c:	81 f0       	breq	.+32     	; 0xe4e <DIO_voidSetPortDirection+0xf8>
     e2e:	13 c0       	rjmp	.+38     	; 0xe56 <DIO_voidSetPortDirection+0x100>
                            {
                                case PORTA :    DDRA_REG = 0xff ;   break;
     e30:	ea e3       	ldi	r30, 0x3A	; 58
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	8f ef       	ldi	r24, 0xFF	; 255
     e36:	80 83       	st	Z, r24
     e38:	0e c0       	rjmp	.+28     	; 0xe56 <DIO_voidSetPortDirection+0x100>
                                case PORTB :    DDRB_REG = 0xff ;   break;
     e3a:	e7 e3       	ldi	r30, 0x37	; 55
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	8f ef       	ldi	r24, 0xFF	; 255
     e40:	80 83       	st	Z, r24
     e42:	09 c0       	rjmp	.+18     	; 0xe56 <DIO_voidSetPortDirection+0x100>
                                case PORTC :    DDRC_REG = 0xff ;   break;
     e44:	e4 e3       	ldi	r30, 0x34	; 52
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	8f ef       	ldi	r24, 0xFF	; 255
     e4a:	80 83       	st	Z, r24
     e4c:	04 c0       	rjmp	.+8      	; 0xe56 <DIO_voidSetPortDirection+0x100>
                                case PORTD :    DDRD_REG = 0xff ;   break;
     e4e:	e1 e3       	ldi	r30, 0x31	; 49
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	8f ef       	ldi	r24, 0xFF	; 255
     e54:	80 83       	st	Z, r24
                            break;
            default :       break;
                            
        }
    }
}
     e56:	28 96       	adiw	r28, 0x08	; 8
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	de bf       	out	0x3e, r29	; 62
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	cd bf       	out	0x3d, r28	; 61
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <DIO_voidSetPinValue>:
/* Fun. Argument2: Copy_u8PinNumber { PIN0,PIN1,PIN3,PIN4,PIN5,PIN6,PIN7 }                */
/* Fun. Argument3: Copy_u8Value { HIGH , LOW }                                            */
/* Fun. Return : void                                                                     */
/******************************************************************************************/
void DIO_voidSetPinValue (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber, u8 Copy_u8Value )
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	29 97       	sbiw	r28, 0x09	; 9
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	f8 94       	cli
     e76:	de bf       	out	0x3e, r29	; 62
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	cd bf       	out	0x3d, r28	; 61
     e7c:	89 83       	std	Y+1, r24	; 0x01
     e7e:	6a 83       	std	Y+2, r22	; 0x02
     e80:	4b 83       	std	Y+3, r20	; 0x03
        /* i/p validation */
    if ( Copy_u8PortNumber > PORTD || Copy_u8PinNumber > PIN7 )
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	84 30       	cpi	r24, 0x04	; 4
     e86:	08 f0       	brcs	.+2      	; 0xe8a <DIO_voidSetPinValue+0x22>
     e88:	f6 c0       	rjmp	.+492    	; 0x1076 <DIO_voidSetPinValue+0x20e>
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	88 30       	cpi	r24, 0x08	; 8
     e8e:	08 f0       	brcs	.+2      	; 0xe92 <DIO_voidSetPinValue+0x2a>
     e90:	f2 c0       	rjmp	.+484    	; 0x1076 <DIO_voidSetPinValue+0x20e>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Value)
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	39 87       	std	Y+9, r19	; 0x09
     e9a:	28 87       	std	Y+8, r18	; 0x08
     e9c:	88 85       	ldd	r24, Y+8	; 0x08
     e9e:	99 85       	ldd	r25, Y+9	; 0x09
     ea0:	00 97       	sbiw	r24, 0x00	; 0
     ea2:	39 f0       	breq	.+14     	; 0xeb2 <DIO_voidSetPinValue+0x4a>
     ea4:	28 85       	ldd	r18, Y+8	; 0x08
     ea6:	39 85       	ldd	r19, Y+9	; 0x09
     ea8:	21 30       	cpi	r18, 0x01	; 1
     eaa:	31 05       	cpc	r19, r1
     eac:	09 f4       	brne	.+2      	; 0xeb0 <DIO_voidSetPinValue+0x48>
     eae:	75 c0       	rjmp	.+234    	; 0xf9a <DIO_voidSetPinValue+0x132>
     eb0:	e2 c0       	rjmp	.+452    	; 0x1076 <DIO_voidSetPinValue+0x20e>
        {
            case LOW :    switch(Copy_u8PortNumber)
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	3f 83       	std	Y+7, r19	; 0x07
     eba:	2e 83       	std	Y+6, r18	; 0x06
     ebc:	8e 81       	ldd	r24, Y+6	; 0x06
     ebe:	9f 81       	ldd	r25, Y+7	; 0x07
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	91 05       	cpc	r25, r1
     ec4:	59 f1       	breq	.+86     	; 0xf1c <DIO_voidSetPinValue+0xb4>
     ec6:	2e 81       	ldd	r18, Y+6	; 0x06
     ec8:	3f 81       	ldd	r19, Y+7	; 0x07
     eca:	22 30       	cpi	r18, 0x02	; 2
     ecc:	31 05       	cpc	r19, r1
     ece:	2c f4       	brge	.+10     	; 0xeda <DIO_voidSetPinValue+0x72>
     ed0:	8e 81       	ldd	r24, Y+6	; 0x06
     ed2:	9f 81       	ldd	r25, Y+7	; 0x07
     ed4:	00 97       	sbiw	r24, 0x00	; 0
     ed6:	69 f0       	breq	.+26     	; 0xef2 <DIO_voidSetPinValue+0x8a>
     ed8:	ce c0       	rjmp	.+412    	; 0x1076 <DIO_voidSetPinValue+0x20e>
     eda:	2e 81       	ldd	r18, Y+6	; 0x06
     edc:	3f 81       	ldd	r19, Y+7	; 0x07
     ede:	22 30       	cpi	r18, 0x02	; 2
     ee0:	31 05       	cpc	r19, r1
     ee2:	89 f1       	breq	.+98     	; 0xf46 <DIO_voidSetPinValue+0xde>
     ee4:	8e 81       	ldd	r24, Y+6	; 0x06
     ee6:	9f 81       	ldd	r25, Y+7	; 0x07
     ee8:	83 30       	cpi	r24, 0x03	; 3
     eea:	91 05       	cpc	r25, r1
     eec:	09 f4       	brne	.+2      	; 0xef0 <DIO_voidSetPinValue+0x88>
     eee:	40 c0       	rjmp	.+128    	; 0xf70 <DIO_voidSetPinValue+0x108>
     ef0:	c2 c0       	rjmp	.+388    	; 0x1076 <DIO_voidSetPinValue+0x20e>
                            {
                                case PORTA :    CLEAR_BIT( PORTA_REG ,Copy_u8PinNumber );   break;
     ef2:	ab e3       	ldi	r26, 0x3B	; 59
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	eb e3       	ldi	r30, 0x3B	; 59
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	48 2f       	mov	r20, r24
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	02 2e       	mov	r0, r18
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <DIO_voidSetPinValue+0xa8>
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	0a 94       	dec	r0
     f12:	e2 f7       	brpl	.-8      	; 0xf0c <DIO_voidSetPinValue+0xa4>
     f14:	80 95       	com	r24
     f16:	84 23       	and	r24, r20
     f18:	8c 93       	st	X, r24
     f1a:	ad c0       	rjmp	.+346    	; 0x1076 <DIO_voidSetPinValue+0x20e>
                                case PORTB :    CLEAR_BIT( PORTB_REG ,Copy_u8PinNumber );   break;
     f1c:	a8 e3       	ldi	r26, 0x38	; 56
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e8 e3       	ldi	r30, 0x38	; 56
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	48 2f       	mov	r20, r24
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 2e       	mov	r0, r18
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <DIO_voidSetPinValue+0xd2>
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	0a 94       	dec	r0
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <DIO_voidSetPinValue+0xce>
     f3e:	80 95       	com	r24
     f40:	84 23       	and	r24, r20
     f42:	8c 93       	st	X, r24
     f44:	98 c0       	rjmp	.+304    	; 0x1076 <DIO_voidSetPinValue+0x20e>
                                case PORTC :    CLEAR_BIT( PORTC_REG ,Copy_u8PinNumber );   break;
     f46:	a5 e3       	ldi	r26, 0x35	; 53
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e5 e3       	ldi	r30, 0x35	; 53
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_voidSetPinValue+0xfc>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_voidSetPinValue+0xf8>
     f68:	80 95       	com	r24
     f6a:	84 23       	and	r24, r20
     f6c:	8c 93       	st	X, r24
     f6e:	83 c0       	rjmp	.+262    	; 0x1076 <DIO_voidSetPinValue+0x20e>
                                case PORTD :    CLEAR_BIT( PORTD_REG ,Copy_u8PinNumber );   break;
     f70:	a2 e3       	ldi	r26, 0x32	; 50
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e2 e3       	ldi	r30, 0x32	; 50
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <DIO_voidSetPinValue+0x126>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <DIO_voidSetPinValue+0x122>
     f92:	80 95       	com	r24
     f94:	84 23       	and	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	6e c0       	rjmp	.+220    	; 0x1076 <DIO_voidSetPinValue+0x20e>
                                default    :                                                break; 
                            }
                            break;
            case HIGH :   switch(Copy_u8PortNumber)
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	3d 83       	std	Y+5, r19	; 0x05
     fa2:	2c 83       	std	Y+4, r18	; 0x04
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	9d 81       	ldd	r25, Y+5	; 0x05
     fa8:	81 30       	cpi	r24, 0x01	; 1
     faa:	91 05       	cpc	r25, r1
     fac:	49 f1       	breq	.+82     	; 0x1000 <DIO_voidSetPinValue+0x198>
     fae:	2c 81       	ldd	r18, Y+4	; 0x04
     fb0:	3d 81       	ldd	r19, Y+5	; 0x05
     fb2:	22 30       	cpi	r18, 0x02	; 2
     fb4:	31 05       	cpc	r19, r1
     fb6:	2c f4       	brge	.+10     	; 0xfc2 <DIO_voidSetPinValue+0x15a>
     fb8:	8c 81       	ldd	r24, Y+4	; 0x04
     fba:	9d 81       	ldd	r25, Y+5	; 0x05
     fbc:	00 97       	sbiw	r24, 0x00	; 0
     fbe:	61 f0       	breq	.+24     	; 0xfd8 <DIO_voidSetPinValue+0x170>
     fc0:	5a c0       	rjmp	.+180    	; 0x1076 <DIO_voidSetPinValue+0x20e>
     fc2:	2c 81       	ldd	r18, Y+4	; 0x04
     fc4:	3d 81       	ldd	r19, Y+5	; 0x05
     fc6:	22 30       	cpi	r18, 0x02	; 2
     fc8:	31 05       	cpc	r19, r1
     fca:	71 f1       	breq	.+92     	; 0x1028 <DIO_voidSetPinValue+0x1c0>
     fcc:	8c 81       	ldd	r24, Y+4	; 0x04
     fce:	9d 81       	ldd	r25, Y+5	; 0x05
     fd0:	83 30       	cpi	r24, 0x03	; 3
     fd2:	91 05       	cpc	r25, r1
     fd4:	e9 f1       	breq	.+122    	; 0x1050 <DIO_voidSetPinValue+0x1e8>
     fd6:	4f c0       	rjmp	.+158    	; 0x1076 <DIO_voidSetPinValue+0x20e>
                            {
                                case PORTA :    SET_BIT( PORTA_REG ,Copy_u8PinNumber );     break;
     fd8:	ab e3       	ldi	r26, 0x3B	; 59
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	eb e3       	ldi	r30, 0x3B	; 59
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_voidSetPinValue+0x18e>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <DIO_voidSetPinValue+0x18a>
     ffa:	84 2b       	or	r24, r20
     ffc:	8c 93       	st	X, r24
     ffe:	3b c0       	rjmp	.+118    	; 0x1076 <DIO_voidSetPinValue+0x20e>
                                case PORTB :    SET_BIT( PORTB_REG ,Copy_u8PinNumber );     break;
    1000:	a8 e3       	ldi	r26, 0x38	; 56
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e8 e3       	ldi	r30, 0x38	; 56
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 2e       	mov	r0, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_voidSetPinValue+0x1b6>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <DIO_voidSetPinValue+0x1b2>
    1022:	84 2b       	or	r24, r20
    1024:	8c 93       	st	X, r24
    1026:	27 c0       	rjmp	.+78     	; 0x1076 <DIO_voidSetPinValue+0x20e>
                                case PORTC :    SET_BIT( PORTC_REG ,Copy_u8PinNumber );     break;
    1028:	a5 e3       	ldi	r26, 0x35	; 53
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e5 e3       	ldi	r30, 0x35	; 53
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	48 2f       	mov	r20, r24
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 2e       	mov	r0, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <DIO_voidSetPinValue+0x1de>
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	0a 94       	dec	r0
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <DIO_voidSetPinValue+0x1da>
    104a:	84 2b       	or	r24, r20
    104c:	8c 93       	st	X, r24
    104e:	13 c0       	rjmp	.+38     	; 0x1076 <DIO_voidSetPinValue+0x20e>
                                case PORTD :    SET_BIT( PORTD_REG ,Copy_u8PinNumber );     break;
    1050:	a2 e3       	ldi	r26, 0x32	; 50
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e2 e3       	ldi	r30, 0x32	; 50
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	48 2f       	mov	r20, r24
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	02 2e       	mov	r0, r18
    1068:	02 c0       	rjmp	.+4      	; 0x106e <DIO_voidSetPinValue+0x206>
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	0a 94       	dec	r0
    1070:	e2 f7       	brpl	.-8      	; 0x106a <DIO_voidSetPinValue+0x202>
    1072:	84 2b       	or	r24, r20
    1074:	8c 93       	st	X, r24
                            break;
            default :       break;
                            
        }
    }
}
    1076:	29 96       	adiw	r28, 0x09	; 9
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	de bf       	out	0x3e, r29	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	cd bf       	out	0x3d, r28	; 61
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <DIO_voidSetPortValue>:
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                          */
/* Fun. Argument2: Copy_u8Value { HIGH , LOW }                                            */
/* Fun. Return : void                                                                     */
/******************************************************************************************/
void DIO_voidSetPortValue (u8 Copy_u8PortNumber, u8 Copy_u8Value )
{
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	00 d0       	rcall	.+0      	; 0x108e <DIO_voidSetPortValue+0x6>
    108e:	00 d0       	rcall	.+0      	; 0x1090 <DIO_voidSetPortValue+0x8>
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	89 83       	std	Y+1, r24	; 0x01
    1096:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD )
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	84 30       	cpi	r24, 0x04	; 4
    109c:	90 f5       	brcc	.+100    	; 0x1102 <DIO_voidSetPortValue+0x7a>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8PortNumber)
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	3c 83       	std	Y+4, r19	; 0x04
    10a6:	2b 83       	std	Y+3, r18	; 0x03
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	9c 81       	ldd	r25, Y+4	; 0x04
    10ac:	81 30       	cpi	r24, 0x01	; 1
    10ae:	91 05       	cpc	r25, r1
    10b0:	d1 f0       	breq	.+52     	; 0x10e6 <DIO_voidSetPortValue+0x5e>
    10b2:	2b 81       	ldd	r18, Y+3	; 0x03
    10b4:	3c 81       	ldd	r19, Y+4	; 0x04
    10b6:	22 30       	cpi	r18, 0x02	; 2
    10b8:	31 05       	cpc	r19, r1
    10ba:	2c f4       	brge	.+10     	; 0x10c6 <DIO_voidSetPortValue+0x3e>
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	9c 81       	ldd	r25, Y+4	; 0x04
    10c0:	00 97       	sbiw	r24, 0x00	; 0
    10c2:	61 f0       	breq	.+24     	; 0x10dc <DIO_voidSetPortValue+0x54>
    10c4:	1e c0       	rjmp	.+60     	; 0x1102 <DIO_voidSetPortValue+0x7a>
    10c6:	2b 81       	ldd	r18, Y+3	; 0x03
    10c8:	3c 81       	ldd	r19, Y+4	; 0x04
    10ca:	22 30       	cpi	r18, 0x02	; 2
    10cc:	31 05       	cpc	r19, r1
    10ce:	81 f0       	breq	.+32     	; 0x10f0 <DIO_voidSetPortValue+0x68>
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	83 30       	cpi	r24, 0x03	; 3
    10d6:	91 05       	cpc	r25, r1
    10d8:	81 f0       	breq	.+32     	; 0x10fa <DIO_voidSetPortValue+0x72>
    10da:	13 c0       	rjmp	.+38     	; 0x1102 <DIO_voidSetPortValue+0x7a>
        {
            case PORTA: PORTA_REG = Copy_u8Value;
    10dc:	eb e3       	ldi	r30, 0x3B	; 59
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	80 83       	st	Z, r24
    10e4:	0e c0       	rjmp	.+28     	; 0x1102 <DIO_voidSetPortValue+0x7a>
                        break;
    
            case PORTB: PORTB_REG = Copy_u8Value;
    10e6:	e8 e3       	ldi	r30, 0x38	; 56
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	80 83       	st	Z, r24
    10ee:	09 c0       	rjmp	.+18     	; 0x1102 <DIO_voidSetPortValue+0x7a>
                        break;
    
            case PORTC: PORTC_REG = Copy_u8Value;
    10f0:	e5 e3       	ldi	r30, 0x35	; 53
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	80 83       	st	Z, r24
    10f8:	04 c0       	rjmp	.+8      	; 0x1102 <DIO_voidSetPortValue+0x7a>
                        break;
    
            case PORTD: PORTD_REG = Copy_u8Value;
    10fa:	e2 e3       	ldi	r30, 0x32	; 50
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	80 83       	st	Z, r24
                        break;
            default:
                        break;
        }
    }
}
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <DIO_u8GetPinValue>:
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }            */
/* Fun. Argument2: Copy_u8PinNumber { PIN0,PIN1,PIN3,PIN4,PIN5,PIN6,PIN7 }  */
/* Fun. Return :  unsigned char   { HIGH , LOW }                            */
/****************************************************************************/
u8 DIO_u8GetPinValue (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber )
{
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	00 d0       	rcall	.+0      	; 0x1116 <DIO_u8GetPinValue+0x6>
    1116:	00 d0       	rcall	.+0      	; 0x1118 <DIO_u8GetPinValue+0x8>
    1118:	0f 92       	push	r0
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
    111e:	8a 83       	std	Y+2, r24	; 0x02
    1120:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8Variable;
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD || Copy_u8PinNumber > PIN7 )
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	84 30       	cpi	r24, 0x04	; 4
    1126:	08 f0       	brcs	.+2      	; 0x112a <DIO_u8GetPinValue+0x1a>
    1128:	6a c0       	rjmp	.+212    	; 0x11fe <DIO_u8GetPinValue+0xee>
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	88 30       	cpi	r24, 0x08	; 8
    112e:	08 f0       	brcs	.+2      	; 0x1132 <DIO_u8GetPinValue+0x22>
    1130:	66 c0       	rjmp	.+204    	; 0x11fe <DIO_u8GetPinValue+0xee>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8PortNumber)
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	3d 83       	std	Y+5, r19	; 0x05
    113a:	2c 83       	std	Y+4, r18	; 0x04
    113c:	8c 81       	ldd	r24, Y+4	; 0x04
    113e:	9d 81       	ldd	r25, Y+5	; 0x05
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	91 05       	cpc	r25, r1
    1144:	39 f1       	breq	.+78     	; 0x1194 <DIO_u8GetPinValue+0x84>
    1146:	2c 81       	ldd	r18, Y+4	; 0x04
    1148:	3d 81       	ldd	r19, Y+5	; 0x05
    114a:	22 30       	cpi	r18, 0x02	; 2
    114c:	31 05       	cpc	r19, r1
    114e:	2c f4       	brge	.+10     	; 0x115a <DIO_u8GetPinValue+0x4a>
    1150:	8c 81       	ldd	r24, Y+4	; 0x04
    1152:	9d 81       	ldd	r25, Y+5	; 0x05
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	61 f0       	breq	.+24     	; 0x1170 <DIO_u8GetPinValue+0x60>
    1158:	52 c0       	rjmp	.+164    	; 0x11fe <DIO_u8GetPinValue+0xee>
    115a:	2c 81       	ldd	r18, Y+4	; 0x04
    115c:	3d 81       	ldd	r19, Y+5	; 0x05
    115e:	22 30       	cpi	r18, 0x02	; 2
    1160:	31 05       	cpc	r19, r1
    1162:	51 f1       	breq	.+84     	; 0x11b8 <DIO_u8GetPinValue+0xa8>
    1164:	8c 81       	ldd	r24, Y+4	; 0x04
    1166:	9d 81       	ldd	r25, Y+5	; 0x05
    1168:	83 30       	cpi	r24, 0x03	; 3
    116a:	91 05       	cpc	r25, r1
    116c:	b9 f1       	breq	.+110    	; 0x11dc <DIO_u8GetPinValue+0xcc>
    116e:	47 c0       	rjmp	.+142    	; 0x11fe <DIO_u8GetPinValue+0xee>
        {
            case PORTA :    Local_u8Variable = GET_BIT( PINA_REG ,Copy_u8PinNumber );   break;   
    1170:	e9 e3       	ldi	r30, 0x39	; 57
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	48 2f       	mov	r20, r24
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	02 2e       	mov	r0, r18
    1184:	02 c0       	rjmp	.+4      	; 0x118a <DIO_u8GetPinValue+0x7a>
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	0a 94       	dec	r0
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <DIO_u8GetPinValue+0x76>
    118e:	84 23       	and	r24, r20
    1190:	89 83       	std	Y+1, r24	; 0x01
    1192:	35 c0       	rjmp	.+106    	; 0x11fe <DIO_u8GetPinValue+0xee>
            case PORTB :    Local_u8Variable = GET_BIT( PINB_REG ,Copy_u8PinNumber );   break;
    1194:	e6 e3       	ldi	r30, 0x36	; 54
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	48 2f       	mov	r20, r24
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 2e       	mov	r0, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <DIO_u8GetPinValue+0x9e>
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	0a 94       	dec	r0
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <DIO_u8GetPinValue+0x9a>
    11b2:	84 23       	and	r24, r20
    11b4:	89 83       	std	Y+1, r24	; 0x01
    11b6:	23 c0       	rjmp	.+70     	; 0x11fe <DIO_u8GetPinValue+0xee>
            case PORTC :    Local_u8Variable = GET_BIT( PINC_REG ,Copy_u8PinNumber );   break;
    11b8:	e3 e3       	ldi	r30, 0x33	; 51
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	48 2f       	mov	r20, r24
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	02 2e       	mov	r0, r18
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <DIO_u8GetPinValue+0xc2>
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	0a 94       	dec	r0
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <DIO_u8GetPinValue+0xbe>
    11d6:	84 23       	and	r24, r20
    11d8:	89 83       	std	Y+1, r24	; 0x01
    11da:	11 c0       	rjmp	.+34     	; 0x11fe <DIO_u8GetPinValue+0xee>
            case PORTD :    Local_u8Variable = GET_BIT( PIND_REG ,Copy_u8PinNumber );   break;
    11dc:	e0 e3       	ldi	r30, 0x30	; 48
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	48 2f       	mov	r20, r24
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	02 2e       	mov	r0, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <DIO_u8GetPinValue+0xe6>
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	0a 94       	dec	r0
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <DIO_u8GetPinValue+0xe2>
    11fa:	84 23       	and	r24, r20
    11fc:	89 83       	std	Y+1, r24	; 0x01
            default :                                                                   break;
        }
    }
    return Local_u8Variable ;
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	08 95       	ret

00001210 <DIO_u8GetPortValue>:
/* Description : Read i/p of the whole Port register                        */
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }            */
/* Fun. Return : u8 {0bxxxxxxxx} (x) is a value in an one Pin on the Port   */
/****************************************************************************/
u8 DIO_u8GetPortValue (u8 Copy_u8PortNumber )
{
    1210:	df 93       	push	r29
    1212:	cf 93       	push	r28
    1214:	00 d0       	rcall	.+0      	; 0x1216 <DIO_u8GetPortValue+0x6>
    1216:	00 d0       	rcall	.+0      	; 0x1218 <DIO_u8GetPortValue+0x8>
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    121c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8Variable;
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD )
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	84 30       	cpi	r24, 0x04	; 4
    1222:	90 f5       	brcc	.+100    	; 0x1288 <DIO_u8GetPortValue+0x78>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8PortNumber)
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	3c 83       	std	Y+4, r19	; 0x04
    122c:	2b 83       	std	Y+3, r18	; 0x03
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	9c 81       	ldd	r25, Y+4	; 0x04
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	91 05       	cpc	r25, r1
    1236:	d1 f0       	breq	.+52     	; 0x126c <DIO_u8GetPortValue+0x5c>
    1238:	2b 81       	ldd	r18, Y+3	; 0x03
    123a:	3c 81       	ldd	r19, Y+4	; 0x04
    123c:	22 30       	cpi	r18, 0x02	; 2
    123e:	31 05       	cpc	r19, r1
    1240:	2c f4       	brge	.+10     	; 0x124c <DIO_u8GetPortValue+0x3c>
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	9c 81       	ldd	r25, Y+4	; 0x04
    1246:	00 97       	sbiw	r24, 0x00	; 0
    1248:	61 f0       	breq	.+24     	; 0x1262 <DIO_u8GetPortValue+0x52>
    124a:	1e c0       	rjmp	.+60     	; 0x1288 <DIO_u8GetPortValue+0x78>
    124c:	2b 81       	ldd	r18, Y+3	; 0x03
    124e:	3c 81       	ldd	r19, Y+4	; 0x04
    1250:	22 30       	cpi	r18, 0x02	; 2
    1252:	31 05       	cpc	r19, r1
    1254:	81 f0       	breq	.+32     	; 0x1276 <DIO_u8GetPortValue+0x66>
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	9c 81       	ldd	r25, Y+4	; 0x04
    125a:	83 30       	cpi	r24, 0x03	; 3
    125c:	91 05       	cpc	r25, r1
    125e:	81 f0       	breq	.+32     	; 0x1280 <DIO_u8GetPortValue+0x70>
    1260:	13 c0       	rjmp	.+38     	; 0x1288 <DIO_u8GetPortValue+0x78>
        {
            case PORTA :    Local_u8Variable = PINA_REG ;   break;  
    1262:	e9 e3       	ldi	r30, 0x39	; 57
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	89 83       	std	Y+1, r24	; 0x01
    126a:	0e c0       	rjmp	.+28     	; 0x1288 <DIO_u8GetPortValue+0x78>
            case PORTB :    Local_u8Variable = PINB_REG ;   break;
    126c:	e6 e3       	ldi	r30, 0x36	; 54
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	89 83       	std	Y+1, r24	; 0x01
    1274:	09 c0       	rjmp	.+18     	; 0x1288 <DIO_u8GetPortValue+0x78>
            case PORTC :    Local_u8Variable = PINC_REG ;   break;
    1276:	e3 e3       	ldi	r30, 0x33	; 51
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	89 83       	std	Y+1, r24	; 0x01
    127e:	04 c0       	rjmp	.+8      	; 0x1288 <DIO_u8GetPortValue+0x78>
            case PORTD :    Local_u8Variable = PIND_REG ;   break;
    1280:	e0 e3       	ldi	r30, 0x30	; 48
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	89 83       	std	Y+1, r24	; 0x01
            default    :                                    break;
        }
    }
    return Local_u8Variable ;
    1288:	89 81       	ldd	r24, Y+1	; 0x01
}
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	cf 91       	pop	r28
    1294:	df 91       	pop	r29
    1296:	08 95       	ret

00001298 <DIO_voidTogglePinValue>:
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }            */
/* Fun. Argument2: Copy_u8PinNumber { PIN0,PIN1,PIN3,PIN4,PIN5,PIN6,PIN7 }  */
/* Fun. Return : void                                                       */
/****************************************************************************/
void DIO_voidTogglePinValue (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber )
{
    1298:	df 93       	push	r29
    129a:	cf 93       	push	r28
    129c:	00 d0       	rcall	.+0      	; 0x129e <DIO_voidTogglePinValue+0x6>
    129e:	00 d0       	rcall	.+0      	; 0x12a0 <DIO_voidTogglePinValue+0x8>
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	89 83       	std	Y+1, r24	; 0x01
    12a6:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD || Copy_u8PinNumber > PIN7 )
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	84 30       	cpi	r24, 0x04	; 4
    12ac:	08 f0       	brcs	.+2      	; 0x12b0 <DIO_voidTogglePinValue+0x18>
    12ae:	72 c0       	rjmp	.+228    	; 0x1394 <DIO_voidTogglePinValue+0xfc>
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	88 30       	cpi	r24, 0x08	; 8
    12b4:	08 f0       	brcs	.+2      	; 0x12b8 <DIO_voidTogglePinValue+0x20>
    12b6:	6e c0       	rjmp	.+220    	; 0x1394 <DIO_voidTogglePinValue+0xfc>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8PortNumber)
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	3c 83       	std	Y+4, r19	; 0x04
    12c0:	2b 83       	std	Y+3, r18	; 0x03
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	91 05       	cpc	r25, r1
    12ca:	49 f1       	breq	.+82     	; 0x131e <DIO_voidTogglePinValue+0x86>
    12cc:	2b 81       	ldd	r18, Y+3	; 0x03
    12ce:	3c 81       	ldd	r19, Y+4	; 0x04
    12d0:	22 30       	cpi	r18, 0x02	; 2
    12d2:	31 05       	cpc	r19, r1
    12d4:	2c f4       	brge	.+10     	; 0x12e0 <DIO_voidTogglePinValue+0x48>
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	9c 81       	ldd	r25, Y+4	; 0x04
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	61 f0       	breq	.+24     	; 0x12f6 <DIO_voidTogglePinValue+0x5e>
    12de:	5a c0       	rjmp	.+180    	; 0x1394 <DIO_voidTogglePinValue+0xfc>
    12e0:	2b 81       	ldd	r18, Y+3	; 0x03
    12e2:	3c 81       	ldd	r19, Y+4	; 0x04
    12e4:	22 30       	cpi	r18, 0x02	; 2
    12e6:	31 05       	cpc	r19, r1
    12e8:	71 f1       	breq	.+92     	; 0x1346 <DIO_voidTogglePinValue+0xae>
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	9c 81       	ldd	r25, Y+4	; 0x04
    12ee:	83 30       	cpi	r24, 0x03	; 3
    12f0:	91 05       	cpc	r25, r1
    12f2:	e9 f1       	breq	.+122    	; 0x136e <DIO_voidTogglePinValue+0xd6>
    12f4:	4f c0       	rjmp	.+158    	; 0x1394 <DIO_voidTogglePinValue+0xfc>
        {
            case PORTA :    TOGGLE_BIT( PORTA_REG, Copy_u8PinNumber );     break;
    12f6:	ab e3       	ldi	r26, 0x3B	; 59
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	eb e3       	ldi	r30, 0x3B	; 59
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	48 2f       	mov	r20, r24
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	02 2e       	mov	r0, r18
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <DIO_voidTogglePinValue+0x7c>
    1310:	88 0f       	add	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	0a 94       	dec	r0
    1316:	e2 f7       	brpl	.-8      	; 0x1310 <DIO_voidTogglePinValue+0x78>
    1318:	84 27       	eor	r24, r20
    131a:	8c 93       	st	X, r24
    131c:	3b c0       	rjmp	.+118    	; 0x1394 <DIO_voidTogglePinValue+0xfc>
            case PORTB :    TOGGLE_BIT( PORTB_REG, Copy_u8PinNumber );     break;
    131e:	a8 e3       	ldi	r26, 0x38	; 56
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e8 e3       	ldi	r30, 0x38	; 56
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	48 2f       	mov	r20, r24
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	02 2e       	mov	r0, r18
    1336:	02 c0       	rjmp	.+4      	; 0x133c <DIO_voidTogglePinValue+0xa4>
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	0a 94       	dec	r0
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <DIO_voidTogglePinValue+0xa0>
    1340:	84 27       	eor	r24, r20
    1342:	8c 93       	st	X, r24
    1344:	27 c0       	rjmp	.+78     	; 0x1394 <DIO_voidTogglePinValue+0xfc>
            case PORTC :    TOGGLE_BIT( PORTC_REG, Copy_u8PinNumber );     break;
    1346:	a5 e3       	ldi	r26, 0x35	; 53
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e5 e3       	ldi	r30, 0x35	; 53
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	48 2f       	mov	r20, r24
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	02 2e       	mov	r0, r18
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <DIO_voidTogglePinValue+0xcc>
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	0a 94       	dec	r0
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <DIO_voidTogglePinValue+0xc8>
    1368:	84 27       	eor	r24, r20
    136a:	8c 93       	st	X, r24
    136c:	13 c0       	rjmp	.+38     	; 0x1394 <DIO_voidTogglePinValue+0xfc>
            case PORTD :    TOGGLE_BIT( PORTD_REG, Copy_u8PinNumber );     break;
    136e:	a2 e3       	ldi	r26, 0x32	; 50
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e2 e3       	ldi	r30, 0x32	; 50
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	48 2f       	mov	r20, r24
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	02 2e       	mov	r0, r18
    1386:	02 c0       	rjmp	.+4      	; 0x138c <DIO_voidTogglePinValue+0xf4>
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	0a 94       	dec	r0
    138e:	e2 f7       	brpl	.-8      	; 0x1388 <DIO_voidTogglePinValue+0xf0>
    1390:	84 27       	eor	r24, r20
    1392:	8c 93       	st	X, r24
            default :                                                      break;
        }
    }
}
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <DIO_voidTogglePortValue>:
/* Description : Toggles pin values of the whole Port register              */
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }            */
/* Fun. Return : void                                                       */
/****************************************************************************/
void DIO_voidTogglePortValue (u8 Copy_u8PortNumber )
{
    13a2:	df 93       	push	r29
    13a4:	cf 93       	push	r28
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <DIO_voidTogglePortValue+0x6>
    13a8:	0f 92       	push	r0
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	89 83       	std	Y+1, r24	; 0x01
        /* i/p validation */
    if ( Copy_u8PortNumber > PORTD )
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	84 30       	cpi	r24, 0x04	; 4
    13b4:	08 f0       	brcs	.+2      	; 0x13b8 <DIO_voidTogglePortValue+0x16>
    13b6:	3e c0       	rjmp	.+124    	; 0x1434 <DIO_voidTogglePortValue+0x92>
    {
        // Do Nothing
    }
    else 
    {
        switch(Copy_u8PortNumber)
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	3b 83       	std	Y+3, r19	; 0x03
    13c0:	2a 83       	std	Y+2, r18	; 0x02
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	9b 81       	ldd	r25, Y+3	; 0x03
    13c6:	81 30       	cpi	r24, 0x01	; 1
    13c8:	91 05       	cpc	r25, r1
    13ca:	e9 f0       	breq	.+58     	; 0x1406 <DIO_voidTogglePortValue+0x64>
    13cc:	2a 81       	ldd	r18, Y+2	; 0x02
    13ce:	3b 81       	ldd	r19, Y+3	; 0x03
    13d0:	22 30       	cpi	r18, 0x02	; 2
    13d2:	31 05       	cpc	r19, r1
    13d4:	2c f4       	brge	.+10     	; 0x13e0 <DIO_voidTogglePortValue+0x3e>
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	9b 81       	ldd	r25, Y+3	; 0x03
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	61 f0       	breq	.+24     	; 0x13f6 <DIO_voidTogglePortValue+0x54>
    13de:	2a c0       	rjmp	.+84     	; 0x1434 <DIO_voidTogglePortValue+0x92>
    13e0:	2a 81       	ldd	r18, Y+2	; 0x02
    13e2:	3b 81       	ldd	r19, Y+3	; 0x03
    13e4:	22 30       	cpi	r18, 0x02	; 2
    13e6:	31 05       	cpc	r19, r1
    13e8:	b1 f0       	breq	.+44     	; 0x1416 <DIO_voidTogglePortValue+0x74>
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	9b 81       	ldd	r25, Y+3	; 0x03
    13ee:	83 30       	cpi	r24, 0x03	; 3
    13f0:	91 05       	cpc	r25, r1
    13f2:	c9 f0       	breq	.+50     	; 0x1426 <DIO_voidTogglePortValue+0x84>
    13f4:	1f c0       	rjmp	.+62     	; 0x1434 <DIO_voidTogglePortValue+0x92>
        {
            case PORTA :    PORTA_REG ^= 0xff ;     break;           
    13f6:	ab e3       	ldi	r26, 0x3B	; 59
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	eb e3       	ldi	r30, 0x3B	; 59
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	80 95       	com	r24
    1402:	8c 93       	st	X, r24
    1404:	17 c0       	rjmp	.+46     	; 0x1434 <DIO_voidTogglePortValue+0x92>
            case PORTB :    PORTB_REG ^= 0xff ;     break;          
    1406:	a8 e3       	ldi	r26, 0x38	; 56
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e8 e3       	ldi	r30, 0x38	; 56
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	80 95       	com	r24
    1412:	8c 93       	st	X, r24
    1414:	0f c0       	rjmp	.+30     	; 0x1434 <DIO_voidTogglePortValue+0x92>
            case PORTC :    PORTC_REG ^= 0xff ;     break; 
    1416:	a5 e3       	ldi	r26, 0x35	; 53
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e5 e3       	ldi	r30, 0x35	; 53
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	80 95       	com	r24
    1422:	8c 93       	st	X, r24
    1424:	07 c0       	rjmp	.+14     	; 0x1434 <DIO_voidTogglePortValue+0x92>
            case PORTD :    PORTD_REG ^= 0xff ;     break; 
    1426:	a2 e3       	ldi	r26, 0x32	; 50
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e2 e3       	ldi	r30, 0x32	; 50
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	80 95       	com	r24
    1432:	8c 93       	st	X, r24
            default    :                            break;
        }
    }
}
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	08 95       	ret

00001440 <DIO_voidConfig_Pull_Up_Pin>:
/* Fun. Argument2: Copy_u8PinNumber { PIN0,PIN1,PIN3,PIN4,PIN5,PIN6,PIN7 }                         */
/* Fun. Argument3: Copy_u8PullUpStatus { ON , OFF }                                                */
/* Fun. Return : void                                                                              */
/***************************************************************************************************/
void DIO_voidConfig_Pull_Up_Pin (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber , u8 Copy_u8PullUpStatus )
{
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	00 d0       	rcall	.+0      	; 0x1446 <DIO_voidConfig_Pull_Up_Pin+0x6>
    1446:	00 d0       	rcall	.+0      	; 0x1448 <DIO_voidConfig_Pull_Up_Pin+0x8>
    1448:	0f 92       	push	r0
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	89 83       	std	Y+1, r24	; 0x01
    1450:	6a 83       	std	Y+2, r22	; 0x02
    1452:	4b 83       	std	Y+3, r20	; 0x03
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD || Copy_u8PinNumber > PIN7 )
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	84 30       	cpi	r24, 0x04	; 4
    1458:	e0 f4       	brcc	.+56     	; 0x1492 <DIO_voidConfig_Pull_Up_Pin+0x52>
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	88 30       	cpi	r24, 0x08	; 8
    145e:	c8 f4       	brcc	.+50     	; 0x1492 <DIO_voidConfig_Pull_Up_Pin+0x52>
    {
        // Do Nothing
    }
    else
    {
       switch(Copy_u8PullUpStatus)
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	3d 83       	std	Y+5, r19	; 0x05
    1468:	2c 83       	std	Y+4, r18	; 0x04
    146a:	8c 81       	ldd	r24, Y+4	; 0x04
    146c:	9d 81       	ldd	r25, Y+5	; 0x05
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	59 f0       	breq	.+22     	; 0x1488 <DIO_voidConfig_Pull_Up_Pin+0x48>
    1472:	2c 81       	ldd	r18, Y+4	; 0x04
    1474:	3d 81       	ldd	r19, Y+5	; 0x05
    1476:	21 30       	cpi	r18, 0x01	; 1
    1478:	31 05       	cpc	r19, r1
    147a:	59 f4       	brne	.+22     	; 0x1492 <DIO_voidConfig_Pull_Up_Pin+0x52>
       {
            case ON  :   DIO_voidSetPinValue (Copy_u8PortNumber,Copy_u8PinNumber, HIGH );   break;
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	6a 81       	ldd	r22, Y+2	; 0x02
    1480:	41 e0       	ldi	r20, 0x01	; 1
    1482:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_voidSetPinValue>
    1486:	05 c0       	rjmp	.+10     	; 0x1492 <DIO_voidConfig_Pull_Up_Pin+0x52>
            case OFF :   DIO_voidSetPinValue (Copy_u8PortNumber,Copy_u8PinNumber, LOW  );   break; 
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	6a 81       	ldd	r22, Y+2	; 0x02
    148c:	40 e0       	ldi	r20, 0x00	; 0
    148e:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_voidSetPinValue>
            default  :                                                                      break; 
       }
    }    
}
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <DIO_voidConfig_Pull_Up_Port>:
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                                   */
/* Fun. Argument2: Copy_u8PullUpStatus { ON , OFF }                                                */
/* Fun. Return : void                                                                              */
/***************************************************************************************************/
void DIO_voidConfig_Pull_Up_Port (u8 Copy_u8PortNumber, u8 Copy_u8PullUpStatus )
{
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <DIO_voidConfig_Pull_Up_Port+0x6>
    14a8:	00 d0       	rcall	.+0      	; 0x14aa <DIO_voidConfig_Pull_Up_Port+0x8>
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	89 83       	std	Y+1, r24	; 0x01
    14b0:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD )
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	84 30       	cpi	r24, 0x04	; 4
    14b6:	b8 f4       	brcc	.+46     	; 0x14e6 <DIO_voidConfig_Pull_Up_Port+0x44>
    {
        // Do Nothing
    }
    else
    {
       switch(Copy_u8PullUpStatus)
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	3c 83       	std	Y+4, r19	; 0x04
    14c0:	2b 83       	std	Y+3, r18	; 0x03
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	9c 81       	ldd	r25, Y+4	; 0x04
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	51 f0       	breq	.+20     	; 0x14de <DIO_voidConfig_Pull_Up_Port+0x3c>
    14ca:	2b 81       	ldd	r18, Y+3	; 0x03
    14cc:	3c 81       	ldd	r19, Y+4	; 0x04
    14ce:	21 30       	cpi	r18, 0x01	; 1
    14d0:	31 05       	cpc	r19, r1
    14d2:	49 f4       	brne	.+18     	; 0x14e6 <DIO_voidConfig_Pull_Up_Port+0x44>
       {
            case ON :  DIO_voidSetPortValue (Copy_u8PortNumber, HIGH );  break;
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	61 e0       	ldi	r22, 0x01	; 1
    14d8:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPortValue>
    14dc:	04 c0       	rjmp	.+8      	; 0x14e6 <DIO_voidConfig_Pull_Up_Port+0x44>
            case OFF:  DIO_voidSetPortValue (Copy_u8PortNumber, LOW );   break;
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	60 e0       	ldi	r22, 0x00	; 0
    14e2:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPortValue>
            default :                                                    break;
       }
    }    
}
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	08 95       	ret

000014f4 <LED_voidInit_Led_Pin>:
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                  */
/* Fun. Argument2: Copy_u8PinNumber { PIN0,PIN1,PIN3,PIN4,PIN5,PIN6,PIN7 }        */
/* Fun. Return : void                                                             */
/**********************************************************************************/
void LED_voidInit_Led_Pin ( u8 Copy_u8PortNumber, u8 Copy_u8PinNumber )
{
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <LED_voidInit_Led_Pin+0x6>
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	89 83       	std	Y+1, r24	; 0x01
    1500:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD  || Copy_u8PinNumber > PIN7 )
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	84 30       	cpi	r24, 0x04	; 4
    1506:	40 f4       	brcc	.+16     	; 0x1518 <LED_voidInit_Led_Pin+0x24>
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	88 30       	cpi	r24, 0x08	; 8
    150c:	28 f4       	brcc	.+10     	; 0x1518 <LED_voidInit_Led_Pin+0x24>
    {
        // Do Nothing
    }
    else
    {
        DIO_voidSetPinDirection (Copy_u8PortNumber,Copy_u8PinNumber,OUTPUT);
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	6a 81       	ldd	r22, Y+2	; 0x02
    1512:	41 e0       	ldi	r20, 0x01	; 1
    1514:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>
    }
}
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	08 95       	ret

00001522 <LED_voidInit_8Leds_Port>:
/* Description : Initialize string of 8 LEDs on specific Port                     */
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                  */
/* Fun. Return : void                                                             */
/**********************************************************************************/
void LED_voidInit_8Leds_Port ( u8 Copy_u8PortNumber)
{
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	0f 92       	push	r0
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	89 83       	std	Y+1, r24	; 0x01
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD )
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	84 30       	cpi	r24, 0x04	; 4
    1532:	20 f4       	brcc	.+8      	; 0x153c <LED_voidInit_8Leds_Port+0x1a>
    {
        // Do Nothing
    }
    else
    {
        DIO_voidSetPortDirection ( Copy_u8PortNumber, OUTPUT );
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	61 e0       	ldi	r22, 0x01	; 1
    1538:	0e 94 ab 06 	call	0xd56	; 0xd56 <DIO_voidSetPortDirection>
    }
}
    153c:	0f 90       	pop	r0
    153e:	cf 91       	pop	r28
    1540:	df 91       	pop	r29
    1542:	08 95       	ret

00001544 <LED_voidStatus_Led_Pin>:
/* Fun. Argument2: Copy_u8PinNumber { PIN0,PIN1,PIN3,PIN4,PIN5,PIN6,PIN7 }                           */
/* Fun. Argument3: Copy_u8Status { ON ,OFF }                                                         */
/* Fun. Return : void                                                                                */
/*****************************************************************************************************/
void LED_voidStatus_Led_Pin ( u8 Copy_u8PortNumber, u8 Copy_u8PinNumber, u8 Copy_u8Status )
{
    1544:	df 93       	push	r29
    1546:	cf 93       	push	r28
    1548:	00 d0       	rcall	.+0      	; 0x154a <LED_voidStatus_Led_Pin+0x6>
    154a:	00 d0       	rcall	.+0      	; 0x154c <LED_voidStatus_Led_Pin+0x8>
    154c:	0f 92       	push	r0
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	89 83       	std	Y+1, r24	; 0x01
    1554:	6a 83       	std	Y+2, r22	; 0x02
    1556:	4b 83       	std	Y+3, r20	; 0x03
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD  || Copy_u8PinNumber > PIN7 )
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	84 30       	cpi	r24, 0x04	; 4
    155c:	e0 f4       	brcc	.+56     	; 0x1596 <LED_voidStatus_Led_Pin+0x52>
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	88 30       	cpi	r24, 0x08	; 8
    1562:	c8 f4       	brcc	.+50     	; 0x1596 <LED_voidStatus_Led_Pin+0x52>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Status)
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	3d 83       	std	Y+5, r19	; 0x05
    156c:	2c 83       	std	Y+4, r18	; 0x04
    156e:	8c 81       	ldd	r24, Y+4	; 0x04
    1570:	9d 81       	ldd	r25, Y+5	; 0x05
    1572:	00 97       	sbiw	r24, 0x00	; 0
    1574:	59 f0       	breq	.+22     	; 0x158c <LED_voidStatus_Led_Pin+0x48>
    1576:	2c 81       	ldd	r18, Y+4	; 0x04
    1578:	3d 81       	ldd	r19, Y+5	; 0x05
    157a:	21 30       	cpi	r18, 0x01	; 1
    157c:	31 05       	cpc	r19, r1
    157e:	59 f4       	brne	.+22     	; 0x1596 <LED_voidStatus_Led_Pin+0x52>
        {
            case ON  :   DIO_voidSetPinValue ( Copy_u8PortNumber, Copy_u8PinNumber, HIGH );     break;
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	6a 81       	ldd	r22, Y+2	; 0x02
    1584:	41 e0       	ldi	r20, 0x01	; 1
    1586:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_voidSetPinValue>
    158a:	05 c0       	rjmp	.+10     	; 0x1596 <LED_voidStatus_Led_Pin+0x52>
            case OFF :   DIO_voidSetPinValue ( Copy_u8PortNumber, Copy_u8PinNumber, LOW  );     break;
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	6a 81       	ldd	r22, Y+2	; 0x02
    1590:	40 e0       	ldi	r20, 0x00	; 0
    1592:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_voidSetPinValue>
            default  :                                                                          break;
        }
    }
}
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	08 95       	ret

000015a6 <LED_voidStatus_8Leds_Port>:
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                                     */
/* Fun. Argument3: Copy_u8Status { ON ,OFF }                                                         */
/* Fun. Return : void                                                                                */
/*****************************************************************************************************/
void LED_voidStatus_8Leds_Port ( u8 Copy_u8PortNumber, u8 Copy_u8Status )
{
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	00 d0       	rcall	.+0      	; 0x15ac <LED_voidStatus_8Leds_Port+0x6>
    15ac:	00 d0       	rcall	.+0      	; 0x15ae <LED_voidStatus_8Leds_Port+0x8>
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	89 83       	std	Y+1, r24	; 0x01
    15b4:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD  )
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	84 30       	cpi	r24, 0x04	; 4
    15ba:	b8 f4       	brcc	.+46     	; 0x15ea <LED_voidStatus_8Leds_Port+0x44>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Status)
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	3c 83       	std	Y+4, r19	; 0x04
    15c4:	2b 83       	std	Y+3, r18	; 0x03
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	51 f0       	breq	.+20     	; 0x15e2 <LED_voidStatus_8Leds_Port+0x3c>
    15ce:	2b 81       	ldd	r18, Y+3	; 0x03
    15d0:	3c 81       	ldd	r19, Y+4	; 0x04
    15d2:	21 30       	cpi	r18, 0x01	; 1
    15d4:	31 05       	cpc	r19, r1
    15d6:	49 f4       	brne	.+18     	; 0x15ea <LED_voidStatus_8Leds_Port+0x44>
        {
            case ON  :   DIO_voidSetPortValue ( Copy_u8PortNumber, HIGH );     break;
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	61 e0       	ldi	r22, 0x01	; 1
    15dc:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPortValue>
    15e0:	04 c0       	rjmp	.+8      	; 0x15ea <LED_voidStatus_8Leds_Port+0x44>
            case OFF :   DIO_voidSetPortValue ( Copy_u8PortNumber, LOW  );     break;
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	60 e0       	ldi	r22, 0x00	; 0
    15e6:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPortValue>
            default  :                                                         break;
        }
    }
}
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	cf 91       	pop	r28
    15f4:	df 91       	pop	r29
    15f6:	08 95       	ret

000015f8 <LED_voidToggle_Led_Pin>:
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                      */
/* Fun. Argument2: Copy_u8PinNumber { PIN0,PIN1,PIN3,PIN4,PIN5,PIN6,PIN7 }            */
/* Fun. Return : void                                                                 */
/**************************************************************************************/
void LED_voidToggle_Led_Pin ( u8 Copy_u8PortNumber, u8 Copy_u8PinNumber )
{
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	00 d0       	rcall	.+0      	; 0x15fe <LED_voidToggle_Led_Pin+0x6>
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD  || Copy_u8PinNumber > PIN7 )
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	84 30       	cpi	r24, 0x04	; 4
    160a:	38 f4       	brcc	.+14     	; 0x161a <LED_voidToggle_Led_Pin+0x22>
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	88 30       	cpi	r24, 0x08	; 8
    1610:	20 f4       	brcc	.+8      	; 0x161a <LED_voidToggle_Led_Pin+0x22>
    {
        // Do Nothing
    }
    else
    {
        DIO_voidTogglePinValue ( Copy_u8PortNumber, Copy_u8PinNumber );
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	6a 81       	ldd	r22, Y+2	; 0x02
    1616:	0e 94 4c 09 	call	0x1298	; 0x1298 <DIO_voidTogglePinValue>
    }
}
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	cf 91       	pop	r28
    1620:	df 91       	pop	r29
    1622:	08 95       	ret

00001624 <LED_voidToggle_8Leds_Port>:
/* Description : Toggle Status of String 8 leds from Turn ON to OFF & from OFF to ON  */
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                      */
/* Fun. Return : void                                                                 */
/**************************************************************************************/
void LED_voidToggle_8Leds_Port ( u8 Copy_u8PortNumber )
{
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	0f 92       	push	r0
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	89 83       	std	Y+1, r24	; 0x01
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD )
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	84 30       	cpi	r24, 0x04	; 4
    1634:	18 f4       	brcc	.+6      	; 0x163c <LED_voidToggle_8Leds_Port+0x18>
    {
        // Do Nothing
    }
    else
    {
        DIO_voidTogglePortValue ( Copy_u8PortNumber );
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DIO_voidTogglePortValue>
    }
}
    163c:	0f 90       	pop	r0
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <LCD_voidInit>:
/********************************** [11]  LCD_voidShiftLeft         *****************************/
/********************************** [12]  LCD_voidShiftRight        *****************************/
/*==============================================================================================*/

void LCD_voidInit (void)
{
    1644:	0f 93       	push	r16
    1646:	1f 93       	push	r17
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	c6 54       	subi	r28, 0x46	; 70
    1652:	d0 40       	sbci	r29, 0x00	; 0
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	cd bf       	out	0x3d, r28	; 61
    /* Control Pins Directions */
    DIO_voidSetPortDirection(LCD_DATA_PORT , OUTPUT);
    165e:	83 e0       	ldi	r24, 0x03	; 3
    1660:	61 e0       	ldi	r22, 0x01	; 1
    1662:	0e 94 ab 06 	call	0xd56	; 0xd56 <DIO_voidSetPortDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT,RS_PIN,OUTPUT);
    1666:	82 e0       	ldi	r24, 0x02	; 2
    1668:	65 e0       	ldi	r22, 0x05	; 5
    166a:	41 e0       	ldi	r20, 0x01	; 1
    166c:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT,RW_PIN,OUTPUT);
    1670:	82 e0       	ldi	r24, 0x02	; 2
    1672:	66 e0       	ldi	r22, 0x06	; 6
    1674:	41 e0       	ldi	r20, 0x01	; 1
    1676:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT,E_PIN,OUTPUT);
    167a:	82 e0       	ldi	r24, 0x02	; 2
    167c:	67 e0       	ldi	r22, 0x07	; 7
    167e:	41 e0       	ldi	r20, 0x01	; 1
    1680:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>
    1684:	fe 01       	movw	r30, r28
    1686:	ed 5b       	subi	r30, 0xBD	; 189
    1688:	ff 4f       	sbci	r31, 0xFF	; 255
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	ac e0       	ldi	r26, 0x0C	; 12
    1690:	b2 e4       	ldi	r27, 0x42	; 66
    1692:	80 83       	st	Z, r24
    1694:	91 83       	std	Z+1, r25	; 0x01
    1696:	a2 83       	std	Z+2, r26	; 0x02
    1698:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    169a:	8e 01       	movw	r16, r28
    169c:	01 5c       	subi	r16, 0xC1	; 193
    169e:	1f 4f       	sbci	r17, 0xFF	; 255
    16a0:	fe 01       	movw	r30, r28
    16a2:	ed 5b       	subi	r30, 0xBD	; 189
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	60 81       	ld	r22, Z
    16a8:	71 81       	ldd	r23, Z+1	; 0x01
    16aa:	82 81       	ldd	r24, Z+2	; 0x02
    16ac:	93 81       	ldd	r25, Z+3	; 0x03
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	4a ef       	ldi	r20, 0xFA	; 250
    16b4:	54 e4       	ldi	r21, 0x44	; 68
    16b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	f8 01       	movw	r30, r16
    16c0:	80 83       	st	Z, r24
    16c2:	91 83       	std	Z+1, r25	; 0x01
    16c4:	a2 83       	std	Z+2, r26	; 0x02
    16c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16c8:	fe 01       	movw	r30, r28
    16ca:	ff 96       	adiw	r30, 0x3f	; 63
    16cc:	60 81       	ld	r22, Z
    16ce:	71 81       	ldd	r23, Z+1	; 0x01
    16d0:	82 81       	ldd	r24, Z+2	; 0x02
    16d2:	93 81       	ldd	r25, Z+3	; 0x03
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	40 e8       	ldi	r20, 0x80	; 128
    16da:	5f e3       	ldi	r21, 0x3F	; 63
    16dc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16e0:	88 23       	and	r24, r24
    16e2:	2c f4       	brge	.+10     	; 0x16ee <LCD_voidInit+0xaa>
		__ticks = 1;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	9e af       	std	Y+62, r25	; 0x3e
    16ea:	8d af       	std	Y+61, r24	; 0x3d
    16ec:	46 c0       	rjmp	.+140    	; 0x177a <LCD_voidInit+0x136>
	else if (__tmp > 65535)
    16ee:	fe 01       	movw	r30, r28
    16f0:	ff 96       	adiw	r30, 0x3f	; 63
    16f2:	60 81       	ld	r22, Z
    16f4:	71 81       	ldd	r23, Z+1	; 0x01
    16f6:	82 81       	ldd	r24, Z+2	; 0x02
    16f8:	93 81       	ldd	r25, Z+3	; 0x03
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	3f ef       	ldi	r19, 0xFF	; 255
    16fe:	4f e7       	ldi	r20, 0x7F	; 127
    1700:	57 e4       	ldi	r21, 0x47	; 71
    1702:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1706:	18 16       	cp	r1, r24
    1708:	64 f5       	brge	.+88     	; 0x1762 <LCD_voidInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    170a:	fe 01       	movw	r30, r28
    170c:	ed 5b       	subi	r30, 0xBD	; 189
    170e:	ff 4f       	sbci	r31, 0xFF	; 255
    1710:	60 81       	ld	r22, Z
    1712:	71 81       	ldd	r23, Z+1	; 0x01
    1714:	82 81       	ldd	r24, Z+2	; 0x02
    1716:	93 81       	ldd	r25, Z+3	; 0x03
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	40 e2       	ldi	r20, 0x20	; 32
    171e:	51 e4       	ldi	r21, 0x41	; 65
    1720:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1724:	dc 01       	movw	r26, r24
    1726:	cb 01       	movw	r24, r22
    1728:	bc 01       	movw	r22, r24
    172a:	cd 01       	movw	r24, r26
    172c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	9e af       	std	Y+62, r25	; 0x3e
    1736:	8d af       	std	Y+61, r24	; 0x3d
    1738:	0f c0       	rjmp	.+30     	; 0x1758 <LCD_voidInit+0x114>
    173a:	88 ec       	ldi	r24, 0xC8	; 200
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	9c af       	std	Y+60, r25	; 0x3c
    1740:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1742:	8b ad       	ldd	r24, Y+59	; 0x3b
    1744:	9c ad       	ldd	r25, Y+60	; 0x3c
    1746:	01 97       	sbiw	r24, 0x01	; 1
    1748:	f1 f7       	brne	.-4      	; 0x1746 <LCD_voidInit+0x102>
    174a:	9c af       	std	Y+60, r25	; 0x3c
    174c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    174e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1750:	9e ad       	ldd	r25, Y+62	; 0x3e
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	9e af       	std	Y+62, r25	; 0x3e
    1756:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1758:	8d ad       	ldd	r24, Y+61	; 0x3d
    175a:	9e ad       	ldd	r25, Y+62	; 0x3e
    175c:	00 97       	sbiw	r24, 0x00	; 0
    175e:	69 f7       	brne	.-38     	; 0x173a <LCD_voidInit+0xf6>
    1760:	16 c0       	rjmp	.+44     	; 0x178e <LCD_voidInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1762:	fe 01       	movw	r30, r28
    1764:	ff 96       	adiw	r30, 0x3f	; 63
    1766:	60 81       	ld	r22, Z
    1768:	71 81       	ldd	r23, Z+1	; 0x01
    176a:	82 81       	ldd	r24, Z+2	; 0x02
    176c:	93 81       	ldd	r25, Z+3	; 0x03
    176e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	9e af       	std	Y+62, r25	; 0x3e
    1778:	8d af       	std	Y+61, r24	; 0x3d
    177a:	8d ad       	ldd	r24, Y+61	; 0x3d
    177c:	9e ad       	ldd	r25, Y+62	; 0x3e
    177e:	9a af       	std	Y+58, r25	; 0x3a
    1780:	89 af       	std	Y+57, r24	; 0x39
    1782:	89 ad       	ldd	r24, Y+57	; 0x39
    1784:	9a ad       	ldd	r25, Y+58	; 0x3a
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	f1 f7       	brne	.-4      	; 0x1786 <LCD_voidInit+0x142>
    178a:	9a af       	std	Y+58, r25	; 0x3a
    178c:	89 af       	std	Y+57, r24	; 0x39

    _delay_ms(35);

    /* Send Command Function Set */
    LCD_voidWriteCommand ( FS_8BIT_2LINES_5x10 );
    178e:	8c e3       	ldi	r24, 0x3C	; 60
    1790:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <LCD_voidWriteCommand>
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	a0 e8       	ldi	r26, 0x80	; 128
    179a:	bf e3       	ldi	r27, 0x3F	; 63
    179c:	8d ab       	std	Y+53, r24	; 0x35
    179e:	9e ab       	std	Y+54, r25	; 0x36
    17a0:	af ab       	std	Y+55, r26	; 0x37
    17a2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a4:	6d a9       	ldd	r22, Y+53	; 0x35
    17a6:	7e a9       	ldd	r23, Y+54	; 0x36
    17a8:	8f a9       	ldd	r24, Y+55	; 0x37
    17aa:	98 ad       	ldd	r25, Y+56	; 0x38
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	4a ef       	ldi	r20, 0xFA	; 250
    17b2:	54 e4       	ldi	r21, 0x44	; 68
    17b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	89 ab       	std	Y+49, r24	; 0x31
    17be:	9a ab       	std	Y+50, r25	; 0x32
    17c0:	ab ab       	std	Y+51, r26	; 0x33
    17c2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17c4:	69 a9       	ldd	r22, Y+49	; 0x31
    17c6:	7a a9       	ldd	r23, Y+50	; 0x32
    17c8:	8b a9       	ldd	r24, Y+51	; 0x33
    17ca:	9c a9       	ldd	r25, Y+52	; 0x34
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	40 e8       	ldi	r20, 0x80	; 128
    17d2:	5f e3       	ldi	r21, 0x3F	; 63
    17d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17d8:	88 23       	and	r24, r24
    17da:	2c f4       	brge	.+10     	; 0x17e6 <LCD_voidInit+0x1a2>
		__ticks = 1;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	98 ab       	std	Y+48, r25	; 0x30
    17e2:	8f a7       	std	Y+47, r24	; 0x2f
    17e4:	3f c0       	rjmp	.+126    	; 0x1864 <LCD_voidInit+0x220>
	else if (__tmp > 65535)
    17e6:	69 a9       	ldd	r22, Y+49	; 0x31
    17e8:	7a a9       	ldd	r23, Y+50	; 0x32
    17ea:	8b a9       	ldd	r24, Y+51	; 0x33
    17ec:	9c a9       	ldd	r25, Y+52	; 0x34
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	3f ef       	ldi	r19, 0xFF	; 255
    17f2:	4f e7       	ldi	r20, 0x7F	; 127
    17f4:	57 e4       	ldi	r21, 0x47	; 71
    17f6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17fa:	18 16       	cp	r1, r24
    17fc:	4c f5       	brge	.+82     	; 0x1850 <LCD_voidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17fe:	6d a9       	ldd	r22, Y+53	; 0x35
    1800:	7e a9       	ldd	r23, Y+54	; 0x36
    1802:	8f a9       	ldd	r24, Y+55	; 0x37
    1804:	98 ad       	ldd	r25, Y+56	; 0x38
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	40 e2       	ldi	r20, 0x20	; 32
    180c:	51 e4       	ldi	r21, 0x41	; 65
    180e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	bc 01       	movw	r22, r24
    1818:	cd 01       	movw	r24, r26
    181a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	98 ab       	std	Y+48, r25	; 0x30
    1824:	8f a7       	std	Y+47, r24	; 0x2f
    1826:	0f c0       	rjmp	.+30     	; 0x1846 <LCD_voidInit+0x202>
    1828:	88 ec       	ldi	r24, 0xC8	; 200
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	9e a7       	std	Y+46, r25	; 0x2e
    182e:	8d a7       	std	Y+45, r24	; 0x2d
    1830:	8d a5       	ldd	r24, Y+45	; 0x2d
    1832:	9e a5       	ldd	r25, Y+46	; 0x2e
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	f1 f7       	brne	.-4      	; 0x1834 <LCD_voidInit+0x1f0>
    1838:	9e a7       	std	Y+46, r25	; 0x2e
    183a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    183c:	8f a5       	ldd	r24, Y+47	; 0x2f
    183e:	98 a9       	ldd	r25, Y+48	; 0x30
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	98 ab       	std	Y+48, r25	; 0x30
    1844:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1846:	8f a5       	ldd	r24, Y+47	; 0x2f
    1848:	98 a9       	ldd	r25, Y+48	; 0x30
    184a:	00 97       	sbiw	r24, 0x00	; 0
    184c:	69 f7       	brne	.-38     	; 0x1828 <LCD_voidInit+0x1e4>
    184e:	14 c0       	rjmp	.+40     	; 0x1878 <LCD_voidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1850:	69 a9       	ldd	r22, Y+49	; 0x31
    1852:	7a a9       	ldd	r23, Y+50	; 0x32
    1854:	8b a9       	ldd	r24, Y+51	; 0x33
    1856:	9c a9       	ldd	r25, Y+52	; 0x34
    1858:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	98 ab       	std	Y+48, r25	; 0x30
    1862:	8f a7       	std	Y+47, r24	; 0x2f
    1864:	8f a5       	ldd	r24, Y+47	; 0x2f
    1866:	98 a9       	ldd	r25, Y+48	; 0x30
    1868:	9c a7       	std	Y+44, r25	; 0x2c
    186a:	8b a7       	std	Y+43, r24	; 0x2b
    186c:	8b a5       	ldd	r24, Y+43	; 0x2b
    186e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	f1 f7       	brne	.-4      	; 0x1870 <LCD_voidInit+0x22c>
    1874:	9c a7       	std	Y+44, r25	; 0x2c
    1876:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);

    /* Send Command Display ON-OFF Control */
    LCD_voidWriteCommand ( DIS_ON_NO_CURSER );
    1878:	8c e0       	ldi	r24, 0x0C	; 12
    187a:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <LCD_voidWriteCommand>
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	a0 e8       	ldi	r26, 0x80	; 128
    1884:	bf e3       	ldi	r27, 0x3F	; 63
    1886:	8f a3       	std	Y+39, r24	; 0x27
    1888:	98 a7       	std	Y+40, r25	; 0x28
    188a:	a9 a7       	std	Y+41, r26	; 0x29
    188c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    188e:	6f a1       	ldd	r22, Y+39	; 0x27
    1890:	78 a5       	ldd	r23, Y+40	; 0x28
    1892:	89 a5       	ldd	r24, Y+41	; 0x29
    1894:	9a a5       	ldd	r25, Y+42	; 0x2a
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	4a ef       	ldi	r20, 0xFA	; 250
    189c:	54 e4       	ldi	r21, 0x44	; 68
    189e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	8b a3       	std	Y+35, r24	; 0x23
    18a8:	9c a3       	std	Y+36, r25	; 0x24
    18aa:	ad a3       	std	Y+37, r26	; 0x25
    18ac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18ae:	6b a1       	ldd	r22, Y+35	; 0x23
    18b0:	7c a1       	ldd	r23, Y+36	; 0x24
    18b2:	8d a1       	ldd	r24, Y+37	; 0x25
    18b4:	9e a1       	ldd	r25, Y+38	; 0x26
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	40 e8       	ldi	r20, 0x80	; 128
    18bc:	5f e3       	ldi	r21, 0x3F	; 63
    18be:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18c2:	88 23       	and	r24, r24
    18c4:	2c f4       	brge	.+10     	; 0x18d0 <LCD_voidInit+0x28c>
		__ticks = 1;
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	9a a3       	std	Y+34, r25	; 0x22
    18cc:	89 a3       	std	Y+33, r24	; 0x21
    18ce:	3f c0       	rjmp	.+126    	; 0x194e <LCD_voidInit+0x30a>
	else if (__tmp > 65535)
    18d0:	6b a1       	ldd	r22, Y+35	; 0x23
    18d2:	7c a1       	ldd	r23, Y+36	; 0x24
    18d4:	8d a1       	ldd	r24, Y+37	; 0x25
    18d6:	9e a1       	ldd	r25, Y+38	; 0x26
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	3f ef       	ldi	r19, 0xFF	; 255
    18dc:	4f e7       	ldi	r20, 0x7F	; 127
    18de:	57 e4       	ldi	r21, 0x47	; 71
    18e0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18e4:	18 16       	cp	r1, r24
    18e6:	4c f5       	brge	.+82     	; 0x193a <LCD_voidInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e8:	6f a1       	ldd	r22, Y+39	; 0x27
    18ea:	78 a5       	ldd	r23, Y+40	; 0x28
    18ec:	89 a5       	ldd	r24, Y+41	; 0x29
    18ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 e2       	ldi	r20, 0x20	; 32
    18f6:	51 e4       	ldi	r21, 0x41	; 65
    18f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	bc 01       	movw	r22, r24
    1902:	cd 01       	movw	r24, r26
    1904:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	9a a3       	std	Y+34, r25	; 0x22
    190e:	89 a3       	std	Y+33, r24	; 0x21
    1910:	0f c0       	rjmp	.+30     	; 0x1930 <LCD_voidInit+0x2ec>
    1912:	88 ec       	ldi	r24, 0xC8	; 200
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	98 a3       	std	Y+32, r25	; 0x20
    1918:	8f 8f       	std	Y+31, r24	; 0x1f
    191a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    191c:	98 a1       	ldd	r25, Y+32	; 0x20
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	f1 f7       	brne	.-4      	; 0x191e <LCD_voidInit+0x2da>
    1922:	98 a3       	std	Y+32, r25	; 0x20
    1924:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1926:	89 a1       	ldd	r24, Y+33	; 0x21
    1928:	9a a1       	ldd	r25, Y+34	; 0x22
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	9a a3       	std	Y+34, r25	; 0x22
    192e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1930:	89 a1       	ldd	r24, Y+33	; 0x21
    1932:	9a a1       	ldd	r25, Y+34	; 0x22
    1934:	00 97       	sbiw	r24, 0x00	; 0
    1936:	69 f7       	brne	.-38     	; 0x1912 <LCD_voidInit+0x2ce>
    1938:	14 c0       	rjmp	.+40     	; 0x1962 <LCD_voidInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193a:	6b a1       	ldd	r22, Y+35	; 0x23
    193c:	7c a1       	ldd	r23, Y+36	; 0x24
    193e:	8d a1       	ldd	r24, Y+37	; 0x25
    1940:	9e a1       	ldd	r25, Y+38	; 0x26
    1942:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	9a a3       	std	Y+34, r25	; 0x22
    194c:	89 a3       	std	Y+33, r24	; 0x21
    194e:	89 a1       	ldd	r24, Y+33	; 0x21
    1950:	9a a1       	ldd	r25, Y+34	; 0x22
    1952:	9e 8f       	std	Y+30, r25	; 0x1e
    1954:	8d 8f       	std	Y+29, r24	; 0x1d
    1956:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1958:	9e 8d       	ldd	r25, Y+30	; 0x1e
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	f1 f7       	brne	.-4      	; 0x195a <LCD_voidInit+0x316>
    195e:	9e 8f       	std	Y+30, r25	; 0x1e
    1960:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);

    /* Send Command Display Clear */
    LCD_voidWriteCommand ( DIS_CLEAR );
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <LCD_voidWriteCommand>
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	a0 e0       	ldi	r26, 0x00	; 0
    196e:	b0 e4       	ldi	r27, 0x40	; 64
    1970:	89 8f       	std	Y+25, r24	; 0x19
    1972:	9a 8f       	std	Y+26, r25	; 0x1a
    1974:	ab 8f       	std	Y+27, r26	; 0x1b
    1976:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1978:	69 8d       	ldd	r22, Y+25	; 0x19
    197a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    197c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    197e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	4a ef       	ldi	r20, 0xFA	; 250
    1986:	54 e4       	ldi	r21, 0x44	; 68
    1988:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	8d 8b       	std	Y+21, r24	; 0x15
    1992:	9e 8b       	std	Y+22, r25	; 0x16
    1994:	af 8b       	std	Y+23, r26	; 0x17
    1996:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1998:	6d 89       	ldd	r22, Y+21	; 0x15
    199a:	7e 89       	ldd	r23, Y+22	; 0x16
    199c:	8f 89       	ldd	r24, Y+23	; 0x17
    199e:	98 8d       	ldd	r25, Y+24	; 0x18
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	40 e8       	ldi	r20, 0x80	; 128
    19a6:	5f e3       	ldi	r21, 0x3F	; 63
    19a8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19ac:	88 23       	and	r24, r24
    19ae:	2c f4       	brge	.+10     	; 0x19ba <LCD_voidInit+0x376>
		__ticks = 1;
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	9c 8b       	std	Y+20, r25	; 0x14
    19b6:	8b 8b       	std	Y+19, r24	; 0x13
    19b8:	3f c0       	rjmp	.+126    	; 0x1a38 <LCD_voidInit+0x3f4>
	else if (__tmp > 65535)
    19ba:	6d 89       	ldd	r22, Y+21	; 0x15
    19bc:	7e 89       	ldd	r23, Y+22	; 0x16
    19be:	8f 89       	ldd	r24, Y+23	; 0x17
    19c0:	98 8d       	ldd	r25, Y+24	; 0x18
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	3f ef       	ldi	r19, 0xFF	; 255
    19c6:	4f e7       	ldi	r20, 0x7F	; 127
    19c8:	57 e4       	ldi	r21, 0x47	; 71
    19ca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19ce:	18 16       	cp	r1, r24
    19d0:	4c f5       	brge	.+82     	; 0x1a24 <LCD_voidInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d2:	69 8d       	ldd	r22, Y+25	; 0x19
    19d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	40 e2       	ldi	r20, 0x20	; 32
    19e0:	51 e4       	ldi	r21, 0x41	; 65
    19e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	bc 01       	movw	r22, r24
    19ec:	cd 01       	movw	r24, r26
    19ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	9c 8b       	std	Y+20, r25	; 0x14
    19f8:	8b 8b       	std	Y+19, r24	; 0x13
    19fa:	0f c0       	rjmp	.+30     	; 0x1a1a <LCD_voidInit+0x3d6>
    19fc:	88 ec       	ldi	r24, 0xC8	; 200
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	9a 8b       	std	Y+18, r25	; 0x12
    1a02:	89 8b       	std	Y+17, r24	; 0x11
    1a04:	89 89       	ldd	r24, Y+17	; 0x11
    1a06:	9a 89       	ldd	r25, Y+18	; 0x12
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	f1 f7       	brne	.-4      	; 0x1a08 <LCD_voidInit+0x3c4>
    1a0c:	9a 8b       	std	Y+18, r25	; 0x12
    1a0e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a10:	8b 89       	ldd	r24, Y+19	; 0x13
    1a12:	9c 89       	ldd	r25, Y+20	; 0x14
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	9c 8b       	std	Y+20, r25	; 0x14
    1a18:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a1e:	00 97       	sbiw	r24, 0x00	; 0
    1a20:	69 f7       	brne	.-38     	; 0x19fc <LCD_voidInit+0x3b8>
    1a22:	14 c0       	rjmp	.+40     	; 0x1a4c <LCD_voidInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a24:	6d 89       	ldd	r22, Y+21	; 0x15
    1a26:	7e 89       	ldd	r23, Y+22	; 0x16
    1a28:	8f 89       	ldd	r24, Y+23	; 0x17
    1a2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	9c 8b       	std	Y+20, r25	; 0x14
    1a36:	8b 8b       	std	Y+19, r24	; 0x13
    1a38:	8b 89       	ldd	r24, Y+19	; 0x13
    1a3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a3c:	98 8b       	std	Y+16, r25	; 0x10
    1a3e:	8f 87       	std	Y+15, r24	; 0x0f
    1a40:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a42:	98 89       	ldd	r25, Y+16	; 0x10
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	f1 f7       	brne	.-4      	; 0x1a44 <LCD_voidInit+0x400>
    1a48:	98 8b       	std	Y+16, r25	; 0x10
    1a4a:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);

    /* Send Command Entry Mode */
    LCD_voidWriteCommand ( ENTRY_MODE_INCREASE_NO_SHIFT );
    1a4c:	86 e0       	ldi	r24, 0x06	; 6
    1a4e:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <LCD_voidWriteCommand>
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	a0 e8       	ldi	r26, 0x80	; 128
    1a58:	bf e3       	ldi	r27, 0x3F	; 63
    1a5a:	8b 87       	std	Y+11, r24	; 0x0b
    1a5c:	9c 87       	std	Y+12, r25	; 0x0c
    1a5e:	ad 87       	std	Y+13, r26	; 0x0d
    1a60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	4a ef       	ldi	r20, 0xFA	; 250
    1a70:	54 e4       	ldi	r21, 0x44	; 68
    1a72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	8f 83       	std	Y+7, r24	; 0x07
    1a7c:	98 87       	std	Y+8, r25	; 0x08
    1a7e:	a9 87       	std	Y+9, r26	; 0x09
    1a80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a82:	6f 81       	ldd	r22, Y+7	; 0x07
    1a84:	78 85       	ldd	r23, Y+8	; 0x08
    1a86:	89 85       	ldd	r24, Y+9	; 0x09
    1a88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	40 e8       	ldi	r20, 0x80	; 128
    1a90:	5f e3       	ldi	r21, 0x3F	; 63
    1a92:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a96:	88 23       	and	r24, r24
    1a98:	2c f4       	brge	.+10     	; 0x1aa4 <LCD_voidInit+0x460>
		__ticks = 1;
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	9e 83       	std	Y+6, r25	; 0x06
    1aa0:	8d 83       	std	Y+5, r24	; 0x05
    1aa2:	3f c0       	rjmp	.+126    	; 0x1b22 <LCD_voidInit+0x4de>
	else if (__tmp > 65535)
    1aa4:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa6:	78 85       	ldd	r23, Y+8	; 0x08
    1aa8:	89 85       	ldd	r24, Y+9	; 0x09
    1aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	3f ef       	ldi	r19, 0xFF	; 255
    1ab0:	4f e7       	ldi	r20, 0x7F	; 127
    1ab2:	57 e4       	ldi	r21, 0x47	; 71
    1ab4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ab8:	18 16       	cp	r1, r24
    1aba:	4c f5       	brge	.+82     	; 0x1b0e <LCD_voidInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1abc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1abe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ac0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	40 e2       	ldi	r20, 0x20	; 32
    1aca:	51 e4       	ldi	r21, 0x41	; 65
    1acc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	bc 01       	movw	r22, r24
    1ad6:	cd 01       	movw	r24, r26
    1ad8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	9e 83       	std	Y+6, r25	; 0x06
    1ae2:	8d 83       	std	Y+5, r24	; 0x05
    1ae4:	0f c0       	rjmp	.+30     	; 0x1b04 <LCD_voidInit+0x4c0>
    1ae6:	88 ec       	ldi	r24, 0xC8	; 200
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	9c 83       	std	Y+4, r25	; 0x04
    1aec:	8b 83       	std	Y+3, r24	; 0x03
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	9c 81       	ldd	r25, Y+4	; 0x04
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	f1 f7       	brne	.-4      	; 0x1af2 <LCD_voidInit+0x4ae>
    1af6:	9c 83       	std	Y+4, r25	; 0x04
    1af8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afa:	8d 81       	ldd	r24, Y+5	; 0x05
    1afc:	9e 81       	ldd	r25, Y+6	; 0x06
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	9e 83       	std	Y+6, r25	; 0x06
    1b02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b04:	8d 81       	ldd	r24, Y+5	; 0x05
    1b06:	9e 81       	ldd	r25, Y+6	; 0x06
    1b08:	00 97       	sbiw	r24, 0x00	; 0
    1b0a:	69 f7       	brne	.-38     	; 0x1ae6 <LCD_voidInit+0x4a2>
    1b0c:	14 c0       	rjmp	.+40     	; 0x1b36 <LCD_voidInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b10:	78 85       	ldd	r23, Y+8	; 0x08
    1b12:	89 85       	ldd	r24, Y+9	; 0x09
    1b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	9e 83       	std	Y+6, r25	; 0x06
    1b20:	8d 83       	std	Y+5, r24	; 0x05
    1b22:	8d 81       	ldd	r24, Y+5	; 0x05
    1b24:	9e 81       	ldd	r25, Y+6	; 0x06
    1b26:	9a 83       	std	Y+2, r25	; 0x02
    1b28:	89 83       	std	Y+1, r24	; 0x01
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	f1 f7       	brne	.-4      	; 0x1b2e <LCD_voidInit+0x4ea>
    1b32:	9a 83       	std	Y+2, r25	; 0x02
    1b34:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);


}
    1b36:	ca 5b       	subi	r28, 0xBA	; 186
    1b38:	df 4f       	sbci	r29, 0xFF	; 255
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	f8 94       	cli
    1b3e:	de bf       	out	0x3e, r29	; 62
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	cd bf       	out	0x3d, r28	; 61
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	1f 91       	pop	r17
    1b4a:	0f 91       	pop	r16
    1b4c:	08 95       	ret

00001b4e <LCD_voidWriteCommand>:

void LCD_voidWriteCommand ( u8 Copy_u8Command )
{
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	0f 92       	push	r0
    1b54:	cd b7       	in	r28, 0x3d	; 61
    1b56:	de b7       	in	r29, 0x3e	; 62
    1b58:	89 83       	std	Y+1, r24	; 0x01
    /* RS=0 because we send a Command not Data */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,RS_PIN,LOW);
    1b5a:	82 e0       	ldi	r24, 0x02	; 2
    1b5c:	65 e0       	ldi	r22, 0x05	; 5
    1b5e:	40 e0       	ldi	r20, 0x00	; 0
    1b60:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_voidSetPinValue>

    /* RW=0 because we Write a Command not Read */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,RW_PIN,LOW);
    1b64:	82 e0       	ldi	r24, 0x02	; 2
    1b66:	66 e0       	ldi	r22, 0x06	; 6
    1b68:	40 e0       	ldi	r20, 0x00	; 0
    1b6a:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_voidSetPinValue>

    /* Send Data bits from MC PINS to LCD Data PINS */
    DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Command);
    1b6e:	83 e0       	ldi	r24, 0x03	; 3
    1b70:	69 81       	ldd	r22, Y+1	; 0x01
    1b72:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPortValue>

    /* Falling Edge on E PIN to make LCD Read This Command */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,E_PIN,HIGH);
    1b76:	82 e0       	ldi	r24, 0x02	; 2
    1b78:	67 e0       	ldi	r22, 0x07	; 7
    1b7a:	41 e0       	ldi	r20, 0x01	; 1
    1b7c:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_voidSetPinValue>
    //_delay_ms(1);
    DIO_voidSetPinValue (LCD_CONTROL_PORT,E_PIN,LOW);
    1b80:	82 e0       	ldi	r24, 0x02	; 2
    1b82:	67 e0       	ldi	r22, 0x07	; 7
    1b84:	40 e0       	ldi	r20, 0x00	; 0
    1b86:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_voidSetPinValue>
}
    1b8a:	0f 90       	pop	r0
    1b8c:	cf 91       	pop	r28
    1b8e:	df 91       	pop	r29
    1b90:	08 95       	ret

00001b92 <LCD_voidWriteChar>:

void LCD_voidWriteChar ( u8 Copy_u8Char )
{
    1b92:	df 93       	push	r29
    1b94:	cf 93       	push	r28
    1b96:	0f 92       	push	r0
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	89 83       	std	Y+1, r24	; 0x01
    /* RS=1 because we send a Data not Command */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,RS_PIN,HIGH);
    1b9e:	82 e0       	ldi	r24, 0x02	; 2
    1ba0:	65 e0       	ldi	r22, 0x05	; 5
    1ba2:	41 e0       	ldi	r20, 0x01	; 1
    1ba4:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_voidSetPinValue>

    /* RW=0 because we Write a Data not Read */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,RW_PIN,LOW);
    1ba8:	82 e0       	ldi	r24, 0x02	; 2
    1baa:	66 e0       	ldi	r22, 0x06	; 6
    1bac:	40 e0       	ldi	r20, 0x00	; 0
    1bae:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_voidSetPinValue>

    /* Send Data bits from MC PINS to LCD Data PINS */
    DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Char);
    1bb2:	83 e0       	ldi	r24, 0x03	; 3
    1bb4:	69 81       	ldd	r22, Y+1	; 0x01
    1bb6:	0e 94 44 08 	call	0x1088	; 0x1088 <DIO_voidSetPortValue>

    /* Falling Edge on E PIN to make LCD Read This Command */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,E_PIN,HIGH);
    1bba:	82 e0       	ldi	r24, 0x02	; 2
    1bbc:	67 e0       	ldi	r22, 0x07	; 7
    1bbe:	41 e0       	ldi	r20, 0x01	; 1
    1bc0:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_voidSetPinValue>
    //_delay_ms(1);
    DIO_voidSetPinValue (LCD_CONTROL_PORT,E_PIN,LOW);
    1bc4:	82 e0       	ldi	r24, 0x02	; 2
    1bc6:	67 e0       	ldi	r22, 0x07	; 7
    1bc8:	40 e0       	ldi	r20, 0x00	; 0
    1bca:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_voidSetPinValue>
}
    1bce:	0f 90       	pop	r0
    1bd0:	cf 91       	pop	r28
    1bd2:	df 91       	pop	r29
    1bd4:	08 95       	ret

00001bd6 <LCD_voidWriteString>:

void LCD_voidWriteString (u8 *Copy_u8Arr )
{
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	00 d0       	rcall	.+0      	; 0x1bdc <LCD_voidWriteString+0x6>
    1bdc:	0f 92       	push	r0
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
    1be2:	9b 83       	std	Y+3, r25	; 0x03
    1be4:	8a 83       	std	Y+2, r24	; 0x02
    u8 i = 0 ;
    1be6:	19 82       	std	Y+1, r1	; 0x01
    1be8:	0e c0       	rjmp	.+28     	; 0x1c06 <LCD_voidWriteString+0x30>
    while (Copy_u8Arr[i] != '\0' )
    {
        LCD_voidWriteChar ( Copy_u8Arr[i] );
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	28 2f       	mov	r18, r24
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf2:	9b 81       	ldd	r25, Y+3	; 0x03
    1bf4:	fc 01       	movw	r30, r24
    1bf6:	e2 0f       	add	r30, r18
    1bf8:	f3 1f       	adc	r31, r19
    1bfa:	80 81       	ld	r24, Z
    1bfc:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <LCD_voidWriteChar>
        i++;
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	8f 5f       	subi	r24, 0xFF	; 255
    1c04:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidWriteString (u8 *Copy_u8Arr )
{
    u8 i = 0 ;
    while (Copy_u8Arr[i] != '\0' )
    1c06:	89 81       	ldd	r24, Y+1	; 0x01
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c10:	fc 01       	movw	r30, r24
    1c12:	e2 0f       	add	r30, r18
    1c14:	f3 1f       	adc	r31, r19
    1c16:	80 81       	ld	r24, Z
    1c18:	88 23       	and	r24, r24
    1c1a:	39 f7       	brne	.-50     	; 0x1bea <LCD_voidWriteString+0x14>
    {
        LCD_voidWriteChar ( Copy_u8Arr[i] );
        i++;
    }
}
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	cf 91       	pop	r28
    1c24:	df 91       	pop	r29
    1c26:	08 95       	ret

00001c28 <LCD_voidWrite_u32Number>:

void LCD_voidWrite_u32Number ( u32 Copy_u32Number)
{
    1c28:	0f 93       	push	r16
    1c2a:	1f 93       	push	r17
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
    1c34:	6b 97       	sbiw	r28, 0x1b	; 27
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	de bf       	out	0x3e, r29	; 62
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	cd bf       	out	0x3d, r28	; 61
    1c40:	68 8f       	std	Y+24, r22	; 0x18
    1c42:	79 8f       	std	Y+25, r23	; 0x19
    1c44:	8a 8f       	std	Y+26, r24	; 0x1a
    1c46:	9b 8f       	std	Y+27, r25	; 0x1b
    u8 Arr[20] ;
    u8 i=0 ;
    1c48:	1b 82       	std	Y+3, r1	; 0x03
    1c4a:	2d c0       	rjmp	.+90     	; 0x1ca6 <LCD_voidWrite_u32Number+0x7e>
    while ( Copy_u32Number > 0 )
    {
        Arr[i] = Copy_u32Number % 10 ;
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	08 2f       	mov	r16, r24
    1c50:	10 e0       	ldi	r17, 0x00	; 0
    1c52:	88 8d       	ldd	r24, Y+24	; 0x18
    1c54:	99 8d       	ldd	r25, Y+25	; 0x19
    1c56:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1c58:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1c5a:	2a e0       	ldi	r18, 0x0A	; 10
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	40 e0       	ldi	r20, 0x00	; 0
    1c60:	50 e0       	ldi	r21, 0x00	; 0
    1c62:	bc 01       	movw	r22, r24
    1c64:	cd 01       	movw	r24, r26
    1c66:	0e 94 1c 14 	call	0x2838	; 0x2838 <__udivmodsi4>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	28 2f       	mov	r18, r24
    1c70:	ce 01       	movw	r24, r28
    1c72:	04 96       	adiw	r24, 0x04	; 4
    1c74:	fc 01       	movw	r30, r24
    1c76:	e0 0f       	add	r30, r16
    1c78:	f1 1f       	adc	r31, r17
    1c7a:	20 83       	st	Z, r18
        Copy_u32Number /= 10 ;
    1c7c:	88 8d       	ldd	r24, Y+24	; 0x18
    1c7e:	99 8d       	ldd	r25, Y+25	; 0x19
    1c80:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1c82:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1c84:	2a e0       	ldi	r18, 0x0A	; 10
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	40 e0       	ldi	r20, 0x00	; 0
    1c8a:	50 e0       	ldi	r21, 0x00	; 0
    1c8c:	bc 01       	movw	r22, r24
    1c8e:	cd 01       	movw	r24, r26
    1c90:	0e 94 1c 14 	call	0x2838	; 0x2838 <__udivmodsi4>
    1c94:	da 01       	movw	r26, r20
    1c96:	c9 01       	movw	r24, r18
    1c98:	88 8f       	std	Y+24, r24	; 0x18
    1c9a:	99 8f       	std	Y+25, r25	; 0x19
    1c9c:	aa 8f       	std	Y+26, r26	; 0x1a
    1c9e:	bb 8f       	std	Y+27, r27	; 0x1b
        i++;
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	8f 5f       	subi	r24, 0xFF	; 255
    1ca4:	8b 83       	std	Y+3, r24	; 0x03

void LCD_voidWrite_u32Number ( u32 Copy_u32Number)
{
    u8 Arr[20] ;
    u8 i=0 ;
    while ( Copy_u32Number > 0 )
    1ca6:	88 8d       	ldd	r24, Y+24	; 0x18
    1ca8:	99 8d       	ldd	r25, Y+25	; 0x19
    1caa:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1cac:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1cae:	00 97       	sbiw	r24, 0x00	; 0
    1cb0:	a1 05       	cpc	r26, r1
    1cb2:	b1 05       	cpc	r27, r1
    1cb4:	59 f6       	brne	.-106    	; 0x1c4c <LCD_voidWrite_u32Number+0x24>
    {
        Arr[i] = Copy_u32Number % 10 ;
        Copy_u32Number /= 10 ;
        i++;
    }
    i--;
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	81 50       	subi	r24, 0x01	; 1
    1cba:	8b 83       	std	Y+3, r24	; 0x03
    for( s16 j=i ; j>=0 ; j--)
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	88 2f       	mov	r24, r24
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	9a 83       	std	Y+2, r25	; 0x02
    1cc4:	89 83       	std	Y+1, r24	; 0x01
    1cc6:	10 c0       	rjmp	.+32     	; 0x1ce8 <LCD_voidWrite_u32Number+0xc0>
    {
        LCD_voidWriteChar ( Arr[j] + '0' );
    1cc8:	29 81       	ldd	r18, Y+1	; 0x01
    1cca:	3a 81       	ldd	r19, Y+2	; 0x02
    1ccc:	ce 01       	movw	r24, r28
    1cce:	04 96       	adiw	r24, 0x04	; 4
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	e2 0f       	add	r30, r18
    1cd4:	f3 1f       	adc	r31, r19
    1cd6:	80 81       	ld	r24, Z
    1cd8:	80 5d       	subi	r24, 0xD0	; 208
    1cda:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <LCD_voidWriteChar>
        Arr[i] = Copy_u32Number % 10 ;
        Copy_u32Number /= 10 ;
        i++;
    }
    i--;
    for( s16 j=i ; j>=0 ; j--)
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce2:	01 97       	sbiw	r24, 0x01	; 1
    1ce4:	9a 83       	std	Y+2, r25	; 0x02
    1ce6:	89 83       	std	Y+1, r24	; 0x01
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	9a 81       	ldd	r25, Y+2	; 0x02
    1cec:	99 23       	and	r25, r25
    1cee:	64 f7       	brge	.-40     	; 0x1cc8 <LCD_voidWrite_u32Number+0xa0>
    {
        LCD_voidWriteChar ( Arr[j] + '0' );
    }
}
    1cf0:	6b 96       	adiw	r28, 0x1b	; 27
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	f8 94       	cli
    1cf6:	de bf       	out	0x3e, r29	; 62
    1cf8:	0f be       	out	0x3f, r0	; 63
    1cfa:	cd bf       	out	0x3d, r28	; 61
    1cfc:	cf 91       	pop	r28
    1cfe:	df 91       	pop	r29
    1d00:	1f 91       	pop	r17
    1d02:	0f 91       	pop	r16
    1d04:	08 95       	ret

00001d06 <LCD_voidGoTo_XY>:

void LCD_voidGoTo_XY ( u8 Copy_u8Line , u8 Copy_u8Position )
{
    1d06:	df 93       	push	r29
    1d08:	cf 93       	push	r28
    1d0a:	00 d0       	rcall	.+0      	; 0x1d0c <LCD_voidGoTo_XY+0x6>
    1d0c:	00 d0       	rcall	.+0      	; 0x1d0e <LCD_voidGoTo_XY+0x8>
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
    1d12:	89 83       	std	Y+1, r24	; 0x01
    1d14:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8Line > LINE_2 || Copy_u8Position > 15 )
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
    1d18:	82 30       	cpi	r24, 0x02	; 2
    1d1a:	d8 f4       	brcc	.+54     	; 0x1d52 <LCD_voidGoTo_XY+0x4c>
    1d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1e:	80 31       	cpi	r24, 0x10	; 16
    1d20:	c0 f4       	brcc	.+48     	; 0x1d52 <LCD_voidGoTo_XY+0x4c>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Line)
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	28 2f       	mov	r18, r24
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	3c 83       	std	Y+4, r19	; 0x04
    1d2a:	2b 83       	std	Y+3, r18	; 0x03
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d30:	00 97       	sbiw	r24, 0x00	; 0
    1d32:	31 f0       	breq	.+12     	; 0x1d40 <LCD_voidGoTo_XY+0x3a>
    1d34:	2b 81       	ldd	r18, Y+3	; 0x03
    1d36:	3c 81       	ldd	r19, Y+4	; 0x04
    1d38:	21 30       	cpi	r18, 0x01	; 1
    1d3a:	31 05       	cpc	r19, r1
    1d3c:	31 f0       	breq	.+12     	; 0x1d4a <LCD_voidGoTo_XY+0x44>
    1d3e:	09 c0       	rjmp	.+18     	; 0x1d52 <LCD_voidGoTo_XY+0x4c>
        {
            case LINE_1 :    LCD_voidWriteCommand ( 0x80 + Copy_u8Position );      break;  //First position at Line_1 is 0x80 Address at DDRAM
    1d40:	8a 81       	ldd	r24, Y+2	; 0x02
    1d42:	80 58       	subi	r24, 0x80	; 128
    1d44:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <LCD_voidWriteCommand>
    1d48:	04 c0       	rjmp	.+8      	; 0x1d52 <LCD_voidGoTo_XY+0x4c>
            case LINE_2 :    LCD_voidWriteCommand ( 0xC0 + Copy_u8Position );      break;  //First position at Line_2 is 0xC0 Address at DDRAM
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	80 54       	subi	r24, 0x40	; 64
    1d4e:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <LCD_voidWriteCommand>
            default     :                                                          break;
        }        
    }
}
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	cf 91       	pop	r28
    1d5c:	df 91       	pop	r29
    1d5e:	08 95       	ret

00001d60 <LCD_voidDrawPattern>:
/* Fun.Argument1: Copy_u8Pattern_Number{PATTERN_0,PATTERN_1,PATTERN_2,PATTERN_3,PATTERN_4,PATTERN_5,PATTERN_6,PATTERN_7} */
/* Fun.Argument2: *Copy_u8Arr_Pattern { Address of array for Details of drawing }                                        */
/* Fun. Return : void                                                                                                    */
/*************************************************************************************************************************/
void LCD_voidDrawPattern ( u8 Copy_u8Pattern_Number , u8 *Copy_u8Arr_Pattern )
{
    1d60:	df 93       	push	r29
    1d62:	cf 93       	push	r28
    1d64:	00 d0       	rcall	.+0      	; 0x1d66 <LCD_voidDrawPattern+0x6>
    1d66:	00 d0       	rcall	.+0      	; 0x1d68 <LCD_voidDrawPattern+0x8>
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	8a 83       	std	Y+2, r24	; 0x02
    1d6e:	7c 83       	std	Y+4, r23	; 0x04
    1d70:	6b 83       	std	Y+3, r22	; 0x03
    LCD_voidWriteCommand ( Copy_u8Pattern_Number );   
    1d72:	8a 81       	ldd	r24, Y+2	; 0x02
    1d74:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <LCD_voidWriteCommand>

    for ( u8 i=0 ; i < 8 ; i++ )
    1d78:	19 82       	std	Y+1, r1	; 0x01
    1d7a:	0e c0       	rjmp	.+28     	; 0x1d98 <LCD_voidDrawPattern+0x38>
    {
        LCD_voidWriteChar ( Copy_u8Arr_Pattern[i] );
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
    1d7e:	28 2f       	mov	r18, r24
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	9c 81       	ldd	r25, Y+4	; 0x04
    1d86:	fc 01       	movw	r30, r24
    1d88:	e2 0f       	add	r30, r18
    1d8a:	f3 1f       	adc	r31, r19
    1d8c:	80 81       	ld	r24, Z
    1d8e:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <LCD_voidWriteChar>
/*************************************************************************************************************************/
void LCD_voidDrawPattern ( u8 Copy_u8Pattern_Number , u8 *Copy_u8Arr_Pattern )
{
    LCD_voidWriteCommand ( Copy_u8Pattern_Number );   

    for ( u8 i=0 ; i < 8 ; i++ )
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	8f 5f       	subi	r24, 0xFF	; 255
    1d96:	89 83       	std	Y+1, r24	; 0x01
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	88 30       	cpi	r24, 0x08	; 8
    1d9c:	78 f3       	brcs	.-34     	; 0x1d7c <LCD_voidDrawPattern+0x1c>
    {
        LCD_voidWriteChar ( Copy_u8Arr_Pattern[i] );
    }
}
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	08 95       	ret

00001dac <LCD_voidWritePattern>:
/* Fun. Argument2: Copy_u8Line { LINE_1 , LINE_2 }                                       */
/* Fun. Argument3: Copy_u8Position { 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 }             */
/* Fun. Return : void                                                                    */
/*****************************************************************************************/
void LCD_voidWritePattern ( u8 Copy_u8Pattern , u8 Copy_u8Line , u8 Copy_u8Position )
{
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	00 d0       	rcall	.+0      	; 0x1db2 <LCD_voidWritePattern+0x6>
    1db2:	0f 92       	push	r0
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
    1db8:	89 83       	std	Y+1, r24	; 0x01
    1dba:	6a 83       	std	Y+2, r22	; 0x02
    1dbc:	4b 83       	std	Y+3, r20	; 0x03
    LCD_voidGoTo_XY ( Copy_u8Line , Copy_u8Position );
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	6b 81       	ldd	r22, Y+3	; 0x03
    1dc2:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <LCD_voidGoTo_XY>
    LCD_voidWriteChar ( Copy_u8Pattern );
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <LCD_voidWriteChar>
}
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	08 95       	ret

00001dd8 <LCD_voidClearDisplay>:

void LCD_voidClearDisplay (void)
{
    1dd8:	df 93       	push	r29
    1dda:	cf 93       	push	r28
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
    LCD_voidWriteCommand ( DIS_CLEAR );
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <LCD_voidWriteCommand>
}
    1de6:	cf 91       	pop	r28
    1de8:	df 91       	pop	r29
    1dea:	08 95       	ret

00001dec <LCD_voidShiftLeft>:

void LCD_voidShiftLeft (void)
{
    1dec:	df 93       	push	r29
    1dee:	cf 93       	push	r28
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
    LCD_voidWriteCommand ( ENTRY_MODE_INCREASE_LEFT_SHIFT );
    1df4:	87 e0       	ldi	r24, 0x07	; 7
    1df6:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <LCD_voidWriteCommand>
}
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <LCD_voidShiftRight>:
void LCD_voidShiftRight (void)
{
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
    LCD_voidWriteCommand ( ENTRY_MODE_DECREASE_RIGHT_SHIFT );
    1e08:	85 e0       	ldi	r24, 0x05	; 5
    1e0a:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <LCD_voidWriteCommand>
}
    1e0e:	cf 91       	pop	r28
    1e10:	df 91       	pop	r29
    1e12:	08 95       	ret

00001e14 <LCD_voidClearGrid>:

void LCD_voidClearGrid ( u8 Copy_u8Line , u8 Copy_u8Position )
{
    1e14:	df 93       	push	r29
    1e16:	cf 93       	push	r28
    1e18:	00 d0       	rcall	.+0      	; 0x1e1a <LCD_voidClearGrid+0x6>
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
    1e1e:	89 83       	std	Y+1, r24	; 0x01
    1e20:	6a 83       	std	Y+2, r22	; 0x02
    LCD_voidGoTo_XY (Copy_u8Line ,Copy_u8Position);
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	6a 81       	ldd	r22, Y+2	; 0x02
    1e26:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <LCD_voidGoTo_XY>
    LCD_voidWriteChar ( ' ' );
    1e2a:	80 e2       	ldi	r24, 0x20	; 32
    1e2c:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <LCD_voidWriteChar>
}
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	cf 91       	pop	r28
    1e36:	df 91       	pop	r29
    1e38:	08 95       	ret

00001e3a <LCD_voidClearLine>:
void LCD_voidClearLine ( u8 Copy_u8Line )
{
    1e3a:	df 93       	push	r29
    1e3c:	cf 93       	push	r28
    1e3e:	00 d0       	rcall	.+0      	; 0x1e40 <LCD_voidClearLine+0x6>
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i=0 ; i<16 ; i++)
    1e46:	19 82       	std	Y+1, r1	; 0x01
    1e48:	0a c0       	rjmp	.+20     	; 0x1e5e <LCD_voidClearLine+0x24>
	{
		LCD_voidGoTo_XY (Copy_u8Line ,i);
    1e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4c:	69 81       	ldd	r22, Y+1	; 0x01
    1e4e:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <LCD_voidGoTo_XY>
		LCD_voidWriteChar ( ' ' );
    1e52:	80 e2       	ldi	r24, 0x20	; 32
    1e54:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <LCD_voidWriteChar>
    LCD_voidGoTo_XY (Copy_u8Line ,Copy_u8Position);
    LCD_voidWriteChar ( ' ' );
}
void LCD_voidClearLine ( u8 Copy_u8Line )
{
	for(u8 i=0 ; i<16 ; i++)
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
    1e5a:	8f 5f       	subi	r24, 0xFF	; 255
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	80 31       	cpi	r24, 0x10	; 16
    1e62:	98 f3       	brcs	.-26     	; 0x1e4a <LCD_voidClearLine+0x10>
	{
		LCD_voidGoTo_XY (Copy_u8Line ,i);
		LCD_voidWriteChar ( ' ' );
	}
}
    1e64:	0f 90       	pop	r0
    1e66:	0f 90       	pop	r0
    1e68:	cf 91       	pop	r28
    1e6a:	df 91       	pop	r29
    1e6c:	08 95       	ret

00001e6e <KPAD_voidInit>:
/* Function Name : KPAD_voidInit          */
/* Description : Initializing the KPAD    */
/* Fun. Return : void                     */
/******************************************/
void KPAD_voidInit (void)
{
    1e6e:	df 93       	push	r29
    1e70:	cf 93       	push	r28
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
    /* Configer The Direction of Coloums Pins as Output */
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_C0_PIN,OUTPUT);
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	64 e0       	ldi	r22, 0x04	; 4
    1e7a:	41 e0       	ldi	r20, 0x01	; 1
    1e7c:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_C1_PIN,OUTPUT);
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	65 e0       	ldi	r22, 0x05	; 5
    1e84:	41 e0       	ldi	r20, 0x01	; 1
    1e86:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_C2_PIN,OUTPUT);
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	66 e0       	ldi	r22, 0x06	; 6
    1e8e:	41 e0       	ldi	r20, 0x01	; 1
    1e90:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_C3_PIN,OUTPUT);
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	67 e0       	ldi	r22, 0x07	; 7
    1e98:	41 e0       	ldi	r20, 0x01	; 1
    1e9a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>

    /* Configer The Direction of Rows Pins as Input */
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_R0_PIN,INPUT);
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	60 e0       	ldi	r22, 0x00	; 0
    1ea2:	40 e0       	ldi	r20, 0x00	; 0
    1ea4:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_R1_PIN,INPUT);
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	61 e0       	ldi	r22, 0x01	; 1
    1eac:	40 e0       	ldi	r20, 0x00	; 0
    1eae:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_R2_PIN,INPUT);
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	62 e0       	ldi	r22, 0x02	; 2
    1eb6:	40 e0       	ldi	r20, 0x00	; 0
    1eb8:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_R3_PIN,INPUT);
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	63 e0       	ldi	r22, 0x03	; 3
    1ec0:	40 e0       	ldi	r20, 0x00	; 0
    1ec2:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>

    /* Activate Pull-Up Res in Pins of Rows */
    DIO_voidConfig_Pull_Up_Pin (KPAD_PORT,KPAD_R0_PIN,ON);
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	60 e0       	ldi	r22, 0x00	; 0
    1eca:	41 e0       	ldi	r20, 0x01	; 1
    1ecc:	0e 94 20 0a 	call	0x1440	; 0x1440 <DIO_voidConfig_Pull_Up_Pin>
    DIO_voidConfig_Pull_Up_Pin (KPAD_PORT,KPAD_R1_PIN,ON);
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	61 e0       	ldi	r22, 0x01	; 1
    1ed4:	41 e0       	ldi	r20, 0x01	; 1
    1ed6:	0e 94 20 0a 	call	0x1440	; 0x1440 <DIO_voidConfig_Pull_Up_Pin>
    DIO_voidConfig_Pull_Up_Pin (KPAD_PORT,KPAD_R2_PIN,ON);
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	62 e0       	ldi	r22, 0x02	; 2
    1ede:	41 e0       	ldi	r20, 0x01	; 1
    1ee0:	0e 94 20 0a 	call	0x1440	; 0x1440 <DIO_voidConfig_Pull_Up_Pin>
    DIO_voidConfig_Pull_Up_Pin (KPAD_PORT,KPAD_R3_PIN,ON);
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	63 e0       	ldi	r22, 0x03	; 3
    1ee8:	41 e0       	ldi	r20, 0x01	; 1
    1eea:	0e 94 20 0a 	call	0x1440	; 0x1440 <DIO_voidConfig_Pull_Up_Pin>

    /* Deactivate Coloum Pins  */      
    DIO_voidSetPinValue (KPAD_PORT,KPAD_C0_PIN,HIGH);
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	64 e0       	ldi	r22, 0x04	; 4
    1ef2:	41 e0       	ldi	r20, 0x01	; 1
    1ef4:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT,KPAD_C1_PIN,HIGH);
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	65 e0       	ldi	r22, 0x05	; 5
    1efc:	41 e0       	ldi	r20, 0x01	; 1
    1efe:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT,KPAD_C2_PIN,HIGH);
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	66 e0       	ldi	r22, 0x06	; 6
    1f06:	41 e0       	ldi	r20, 0x01	; 1
    1f08:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT,KPAD_C3_PIN,HIGH); 
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	67 e0       	ldi	r22, 0x07	; 7
    1f10:	41 e0       	ldi	r20, 0x01	; 1
    1f12:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_voidSetPinValue>
}
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	08 95       	ret

00001f1c <KPAD_u8GetPressedKey>:
/* Function Name : KPAD_u8GetPressedKey                                                  */
/* Description : Write a Pattern on the LCD at specific Line & Position                  */
/* Fun. Return : unsigned character ( The Oressed Key / Key = 0xff if not key pressed )  */                                                                 
/*****************************************************************************************/
u8   KPAD_u8GetPressedKey (void)
{
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	00 d0       	rcall	.+0      	; 0x1f22 <KPAD_u8GetPressedKey+0x6>
    1f22:	00 d0       	rcall	.+0      	; 0x1f24 <KPAD_u8GetPressedKey+0x8>
    1f24:	0f 92       	push	r0
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8ColumnsIter ;
    u8 Local_u8RowsIter ;
    u8 Local_u8PinValue ;
    u8 Local_u8PressedKey = 0xff ; // return will be 0xff if not pressed any key 
    1f2a:	8f ef       	ldi	r24, 0xFF	; 255
    1f2c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8Flag = 0 ;
    1f2e:	19 82       	std	Y+1, r1	; 0x01
    for ( Local_u8ColumnsIter = 0 ; Local_u8ColumnsIter < KPAD_COLUMNS_NUM ; Local_u8ColumnsIter ++ )
    1f30:	1d 82       	std	Y+5, r1	; 0x05
    1f32:	6d c0       	rjmp	.+218    	; 0x200e <KPAD_u8GetPressedKey+0xf2>
    {
        /* Active the current Column */
        DIO_voidSetPinValue ( KPAD_PORT , KPAD_Au8ColumnsArr[Local_u8ColumnsIter] , LOW );
    1f34:	8d 81       	ldd	r24, Y+5	; 0x05
    1f36:	88 2f       	mov	r24, r24
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	fc 01       	movw	r30, r24
    1f3c:	e7 55       	subi	r30, 0x57	; 87
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	90 81       	ld	r25, Z
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	69 2f       	mov	r22, r25
    1f46:	40 e0       	ldi	r20, 0x00	; 0
    1f48:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_voidSetPinValue>

        for ( Local_u8RowsIter = 0 ; Local_u8RowsIter < KPAD_ROWS_NUM ; Local_u8RowsIter ++ )
    1f4c:	1c 82       	std	Y+4, r1	; 0x04
    1f4e:	49 c0       	rjmp	.+146    	; 0x1fe2 <KPAD_u8GetPressedKey+0xc6>
        {
            /* Delay for Debounsing */
            //_delay_ms(50);
            /* Read Row Pin */
            Local_u8PinValue = DIO_u8GetPinValue ( KPAD_PORT , KPAD_Au8RowsArr[Local_u8RowsIter] );
    1f50:	8c 81       	ldd	r24, Y+4	; 0x04
    1f52:	88 2f       	mov	r24, r24
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	fc 01       	movw	r30, r24
    1f58:	e3 55       	subi	r30, 0x53	; 83
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	90 81       	ld	r25, Z
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	69 2f       	mov	r22, r25
    1f62:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_u8GetPinValue>
    1f66:	8b 83       	std	Y+3, r24	; 0x03

            /* Key Pressed */
            if ( Local_u8PinValue == 0 )
    1f68:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6a:	88 23       	and	r24, r24
    1f6c:	b9 f5       	brne	.+110    	; 0x1fdc <KPAD_u8GetPressedKey+0xc0>
    1f6e:	20 c0       	rjmp	.+64     	; 0x1fb0 <KPAD_u8GetPressedKey+0x94>
            {
                /* More Checking again for Debounsing */
                while ( Local_u8PinValue == 0 )
                {
                    /* Get pressed Key Value when i make sure that the low state is stable  */
                    Local_u8PressedKey = KPAD_Au8KeysArr[Local_u8RowsIter][Local_u8ColumnsIter] ;
    1f70:	8c 81       	ldd	r24, Y+4	; 0x04
    1f72:	48 2f       	mov	r20, r24
    1f74:	50 e0       	ldi	r21, 0x00	; 0
    1f76:	8d 81       	ldd	r24, Y+5	; 0x05
    1f78:	28 2f       	mov	r18, r24
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	ca 01       	movw	r24, r20
    1f7e:	88 0f       	add	r24, r24
    1f80:	99 1f       	adc	r25, r25
    1f82:	88 0f       	add	r24, r24
    1f84:	99 1f       	adc	r25, r25
    1f86:	82 0f       	add	r24, r18
    1f88:	93 1f       	adc	r25, r19
    1f8a:	fc 01       	movw	r30, r24
    1f8c:	ef 54       	subi	r30, 0x4F	; 79
    1f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f90:	80 81       	ld	r24, Z
    1f92:	8a 83       	std	Y+2, r24	; 0x02
                    /* Read Row Pin again for sure for Debounsing and exit while loop when change at pressed button 
                    whithout it the program will not extern about while loop */
                    Local_u8PinValue = DIO_u8GetPinValue ( KPAD_PORT , KPAD_Au8RowsArr[Local_u8RowsIter] );
    1f94:	8c 81       	ldd	r24, Y+4	; 0x04
    1f96:	88 2f       	mov	r24, r24
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	e3 55       	subi	r30, 0x53	; 83
    1f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa0:	90 81       	ld	r25, Z
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	69 2f       	mov	r22, r25
    1fa6:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_u8GetPinValue>
    1faa:	8b 83       	std	Y+3, r24	; 0x03
                    Local_u8Flag = 1 ;
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	89 83       	std	Y+1, r24	; 0x01

            /* Key Pressed */
            if ( Local_u8PinValue == 0 )
            {
                /* More Checking again for Debounsing */
                while ( Local_u8PinValue == 0 )
    1fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb2:	88 23       	and	r24, r24
    1fb4:	e9 f2       	breq	.-70     	; 0x1f70 <KPAD_u8GetPressedKey+0x54>
                    /* Read Row Pin again for sure for Debounsing and exit while loop when change at pressed button 
                    whithout it the program will not extern about while loop */
                    Local_u8PinValue = DIO_u8GetPinValue ( KPAD_PORT , KPAD_Au8RowsArr[Local_u8RowsIter] );
                    Local_u8Flag = 1 ;
                }
                Local_u8PressedKey = KPAD_Au8KeysArr[Local_u8RowsIter][Local_u8ColumnsIter] ;
    1fb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb8:	48 2f       	mov	r20, r24
    1fba:	50 e0       	ldi	r21, 0x00	; 0
    1fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbe:	28 2f       	mov	r18, r24
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	ca 01       	movw	r24, r20
    1fc4:	88 0f       	add	r24, r24
    1fc6:	99 1f       	adc	r25, r25
    1fc8:	88 0f       	add	r24, r24
    1fca:	99 1f       	adc	r25, r25
    1fcc:	82 0f       	add	r24, r18
    1fce:	93 1f       	adc	r25, r19
    1fd0:	fc 01       	movw	r30, r24
    1fd2:	ef 54       	subi	r30, 0x4F	; 79
    1fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd6:	80 81       	ld	r24, Z
    1fd8:	8a 83       	std	Y+2, r24	; 0x02
    1fda:	07 c0       	rjmp	.+14     	; 0x1fea <KPAD_u8GetPressedKey+0xce>
    for ( Local_u8ColumnsIter = 0 ; Local_u8ColumnsIter < KPAD_COLUMNS_NUM ; Local_u8ColumnsIter ++ )
    {
        /* Active the current Column */
        DIO_voidSetPinValue ( KPAD_PORT , KPAD_Au8ColumnsArr[Local_u8ColumnsIter] , LOW );

        for ( Local_u8RowsIter = 0 ; Local_u8RowsIter < KPAD_ROWS_NUM ; Local_u8RowsIter ++ )
    1fdc:	8c 81       	ldd	r24, Y+4	; 0x04
    1fde:	8f 5f       	subi	r24, 0xFF	; 255
    1fe0:	8c 83       	std	Y+4, r24	; 0x04
    1fe2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe4:	84 30       	cpi	r24, 0x04	; 4
    1fe6:	08 f4       	brcc	.+2      	; 0x1fea <KPAD_u8GetPressedKey+0xce>
    1fe8:	b3 cf       	rjmp	.-154    	; 0x1f50 <KPAD_u8GetPressedKey+0x34>
                Local_u8PressedKey = KPAD_Au8KeysArr[Local_u8RowsIter][Local_u8ColumnsIter] ;
                break;
            }
        }
        /* Active the current Column */
        DIO_voidSetPinValue ( KPAD_PORT , KPAD_Au8ColumnsArr[Local_u8ColumnsIter] , HIGH );
    1fea:	8d 81       	ldd	r24, Y+5	; 0x05
    1fec:	88 2f       	mov	r24, r24
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	fc 01       	movw	r30, r24
    1ff2:	e7 55       	subi	r30, 0x57	; 87
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	90 81       	ld	r25, Z
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	69 2f       	mov	r22, r25
    1ffc:	41 e0       	ldi	r20, 0x01	; 1
    1ffe:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_voidSetPinValue>
        if ( Local_u8Flag == 1 )
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	81 30       	cpi	r24, 0x01	; 1
    2006:	39 f0       	breq	.+14     	; 0x2016 <KPAD_u8GetPressedKey+0xfa>
    u8 Local_u8ColumnsIter ;
    u8 Local_u8RowsIter ;
    u8 Local_u8PinValue ;
    u8 Local_u8PressedKey = 0xff ; // return will be 0xff if not pressed any key 
    u8 Local_u8Flag = 0 ;
    for ( Local_u8ColumnsIter = 0 ; Local_u8ColumnsIter < KPAD_COLUMNS_NUM ; Local_u8ColumnsIter ++ )
    2008:	8d 81       	ldd	r24, Y+5	; 0x05
    200a:	8f 5f       	subi	r24, 0xFF	; 255
    200c:	8d 83       	std	Y+5, r24	; 0x05
    200e:	8d 81       	ldd	r24, Y+5	; 0x05
    2010:	84 30       	cpi	r24, 0x04	; 4
    2012:	08 f4       	brcc	.+2      	; 0x2016 <KPAD_u8GetPressedKey+0xfa>
    2014:	8f cf       	rjmp	.-226    	; 0x1f34 <KPAD_u8GetPressedKey+0x18>
        if ( Local_u8Flag == 1 )
        {
            break;
        }
    }
    return Local_u8PressedKey ;
    2016:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	0f 90       	pop	r0
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	08 95       	ret

00002028 <BUTTON_voidInit_Button_Pin>:
/* Fun. Argument2: Copy_u8PinNumber { PIN0,PIN1,PIN3,PIN4,PIN5,PIN6,PIN7 }                           */
/* Fun. Argument3: Copy_u8PullUpStatus { ON , OFF }                                                  */
/* Fun. Return : void                                                                                */
/*****************************************************************************************************/
void BUTTON_voidInit_Button_Pin ( u8 Copy_u8PortNumber, u8 Copy_u8PinNumber , u8 Copy_u8PullUpStatus )
{
    2028:	df 93       	push	r29
    202a:	cf 93       	push	r28
    202c:	00 d0       	rcall	.+0      	; 0x202e <BUTTON_voidInit_Button_Pin+0x6>
    202e:	0f 92       	push	r0
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
    2034:	89 83       	std	Y+1, r24	; 0x01
    2036:	6a 83       	std	Y+2, r22	; 0x02
    2038:	4b 83       	std	Y+3, r20	; 0x03
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD  || Copy_u8PinNumber > PIN7 )
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	84 30       	cpi	r24, 0x04	; 4
    203e:	68 f4       	brcc	.+26     	; 0x205a <BUTTON_voidInit_Button_Pin+0x32>
    2040:	8a 81       	ldd	r24, Y+2	; 0x02
    2042:	88 30       	cpi	r24, 0x08	; 8
    2044:	50 f4       	brcc	.+20     	; 0x205a <BUTTON_voidInit_Button_Pin+0x32>
    {
        // Do Nothing
    }
    else
    {   // Set Direction INPUT to Copy_u8PinNumber
        DIO_voidSetPinDirection (Copy_u8PortNumber,Copy_u8PinNumber,INPUT);
    2046:	89 81       	ldd	r24, Y+1	; 0x01
    2048:	6a 81       	ldd	r22, Y+2	; 0x02
    204a:	40 e0       	ldi	r20, 0x00	; 0
    204c:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>
        // activate Pull Up Resistor on Copy_u8PinNumber
        DIO_voidConfig_Pull_Up_Pin (Copy_u8PortNumber,Copy_u8PinNumber, Copy_u8PullUpStatus );
    2050:	89 81       	ldd	r24, Y+1	; 0x01
    2052:	6a 81       	ldd	r22, Y+2	; 0x02
    2054:	4b 81       	ldd	r20, Y+3	; 0x03
    2056:	0e 94 20 0a 	call	0x1440	; 0x1440 <DIO_voidConfig_Pull_Up_Pin>
    }
}
    205a:	0f 90       	pop	r0
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	cf 91       	pop	r28
    2062:	df 91       	pop	r29
    2064:	08 95       	ret

00002066 <BUTTON_voidInit_8Buttons_Port>:
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                                     */
/* Fun. Argument3: Copy_u8PullUpStatus { ON , OFF }                                                  */
/* Fun. Return : void                                                                                */
/*****************************************************************************************************/
void BUTTON_voidInit_8Buttons_Port ( u8 Copy_u8PortNumber, u8 Copy_u8PullUpStatus )
{
    2066:	df 93       	push	r29
    2068:	cf 93       	push	r28
    206a:	00 d0       	rcall	.+0      	; 0x206c <BUTTON_voidInit_8Buttons_Port+0x6>
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
    2070:	89 83       	std	Y+1, r24	; 0x01
    2072:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD )
    2074:	89 81       	ldd	r24, Y+1	; 0x01
    2076:	84 30       	cpi	r24, 0x04	; 4
    2078:	40 f4       	brcc	.+16     	; 0x208a <BUTTON_voidInit_8Buttons_Port+0x24>
    {
        // Do Nothing
    }
    else
    {   // Set Direction INPUT to Copy_u8PortNumber
        DIO_voidSetPortDirection (Copy_u8PortNumber, INPUT );
    207a:	89 81       	ldd	r24, Y+1	; 0x01
    207c:	60 e0       	ldi	r22, 0x00	; 0
    207e:	0e 94 ab 06 	call	0xd56	; 0xd56 <DIO_voidSetPortDirection>
        // activate Pull Up Resistor on Copy_u8PortNumber
        DIO_voidConfig_Pull_Up_Port (Copy_u8PortNumber, Copy_u8PullUpStatus );
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	6a 81       	ldd	r22, Y+2	; 0x02
    2086:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <DIO_voidConfig_Pull_Up_Port>
    }
}
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	08 95       	ret

00002094 <BUTTON_u8Get_Button_Pin>:
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                                     */
/* Fun. Argument2: Copy_u8PinNumber { PIN0,PIN1,PIN3,PIN4,PIN5,PIN6,PIN7 }                           */
/* Fun. Return : unsigned character { LOW (Button is Pressed) , HIGH (Button is Not Pressed) }       */
/*****************************************************************************************************/
u8 BUTTON_u8Get_Button_Pin (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber )
{
    2094:	df 93       	push	r29
    2096:	cf 93       	push	r28
    2098:	00 d0       	rcall	.+0      	; 0x209a <BUTTON_u8Get_Button_Pin+0x6>
    209a:	0f 92       	push	r0
    209c:	cd b7       	in	r28, 0x3d	; 61
    209e:	de b7       	in	r29, 0x3e	; 62
    20a0:	89 83       	std	Y+1, r24	; 0x01
    20a2:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD || Copy_u8PinNumber > PIN7 )
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	84 30       	cpi	r24, 0x04	; 4
    20a8:	50 f4       	brcc	.+20     	; 0x20be <BUTTON_u8Get_Button_Pin+0x2a>
    20aa:	8a 81       	ldd	r24, Y+2	; 0x02
    20ac:	88 30       	cpi	r24, 0x08	; 8
    20ae:	38 f4       	brcc	.+14     	; 0x20be <BUTTON_u8Get_Button_Pin+0x2a>
    {
        // Do Nothing
    }
    else
    {   
        return DIO_u8GetPinValue ( Copy_u8PortNumber,  Copy_u8PinNumber ) ;
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	6a 81       	ldd	r22, Y+2	; 0x02
    20b4:	0e 94 88 08 	call	0x1110	; 0x1110 <DIO_u8GetPinValue>
    20b8:	8b 83       	std	Y+3, r24	; 0x03
    }
}
    20ba:	8b 81       	ldd	r24, Y+3	; 0x03
    20bc:	00 c0       	rjmp	.+0      	; 0x20be <BUTTON_u8Get_Button_Pin+0x2a>
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	0f 90       	pop	r0
    20c4:	cf 91       	pop	r28
    20c6:	df 91       	pop	r29
    20c8:	08 95       	ret

000020ca <BUTTON_u8Get_8Buttons_Port>:
/* Description : Read String of 8 push buttons value in a given Port                                 */
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                                     */
/* Fun. Return : unsigned character { 0bxxxxxxxx } (x) is a value in an one Pin on the Port          */
/*****************************************************************************************************/
u8 BUTTON_u8Get_8Buttons_Port (u8 Copy_u8PortNumber)
{
    20ca:	df 93       	push	r29
    20cc:	cf 93       	push	r28
    20ce:	00 d0       	rcall	.+0      	; 0x20d0 <BUTTON_u8Get_8Buttons_Port+0x6>
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
    20d4:	89 83       	std	Y+1, r24	; 0x01
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD )
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	84 30       	cpi	r24, 0x04	; 4
    20da:	30 f4       	brcc	.+12     	; 0x20e8 <BUTTON_u8Get_8Buttons_Port+0x1e>
    {
        // Do Nothing
    }
    else
    {   
        return DIO_u8GetPortValue ( Copy_u8PortNumber ) ;
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
    20de:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_u8GetPortValue>
    20e2:	8a 83       	std	Y+2, r24	; 0x02
    }
}
    20e4:	8a 81       	ldd	r24, Y+2	; 0x02
    20e6:	00 c0       	rjmp	.+0      	; 0x20e8 <BUTTON_u8Get_8Buttons_Port+0x1e>
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	cf 91       	pop	r28
    20ee:	df 91       	pop	r29
    20f0:	08 95       	ret

000020f2 <main>:
		LCD_voidWriteChar(Local_u8PressedKey);
	}
*/

int main()
{
    20f2:	ef 92       	push	r14
    20f4:	ff 92       	push	r15
    20f6:	0f 93       	push	r16
    20f8:	1f 93       	push	r17
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    2102:	cd 54       	subi	r28, 0x4D	; 77
    2104:	d0 40       	sbci	r29, 0x00	; 0
    2106:	0f b6       	in	r0, 0x3f	; 63
    2108:	f8 94       	cli
    210a:	de bf       	out	0x3e, r29	; 62
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	cd bf       	out	0x3d, r28	; 61
	LCD_voidInit();
    2110:	0e 94 22 0b 	call	0x1644	; 0x1644 <LCD_voidInit>
	KPAD_voidInit();
    2114:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <KPAD_voidInit>

	u32 operand_1 = 0 ;
    2118:	fe 01       	movw	r30, r28
    211a:	e8 5b       	subi	r30, 0xB8	; 184
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	10 82       	st	Z, r1
    2120:	11 82       	std	Z+1, r1	; 0x01
    2122:	12 82       	std	Z+2, r1	; 0x02
    2124:	13 82       	std	Z+3, r1	; 0x03
	u32 operand_2 = 0 ;
    2126:	fe 01       	movw	r30, r28
    2128:	ec 5b       	subi	r30, 0xBC	; 188
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	10 82       	st	Z, r1
    212e:	11 82       	std	Z+1, r1	; 0x01
    2130:	12 82       	std	Z+2, r1	; 0x02
    2132:	13 82       	std	Z+3, r1	; 0x03
	u8 operator ;
	u8 operator_flag = 0 ;
    2134:	fe 01       	movw	r30, r28
    2136:	ee 5b       	subi	r30, 0xBE	; 190
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	10 82       	st	Z, r1
	u32 Copy_u8Temp = 0 ;
    213c:	fe 01       	movw	r30, r28
    213e:	fe 96       	adiw	r30, 0x3e	; 62
    2140:	10 82       	st	Z, r1
    2142:	11 82       	std	Z+1, r1	; 0x01
    2144:	12 82       	std	Z+2, r1	; 0x02
    2146:	13 82       	std	Z+3, r1	; 0x03
	u32 Result = 0 ;
    2148:	1a ae       	std	Y+58, r1	; 0x3a
    214a:	1b ae       	std	Y+59, r1	; 0x3b
    214c:	1c ae       	std	Y+60, r1	; 0x3c
    214e:	1d ae       	std	Y+61, r1	; 0x3d
	u8 Local_u8PressedKey ;

	LCD_voidGoTo_XY ( LINE_1 ,0);
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	60 e0       	ldi	r22, 0x00	; 0
    2154:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <LCD_voidGoTo_XY>
	LCD_voidWriteString ("Ahmed Bahaa Nasr");
    2158:	80 e6       	ldi	r24, 0x60	; 96
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <LCD_voidWriteString>
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	a8 ec       	ldi	r26, 0xC8	; 200
    2166:	b2 e4       	ldi	r27, 0x42	; 66
    2168:	8d ab       	std	Y+53, r24	; 0x35
    216a:	9e ab       	std	Y+54, r25	; 0x36
    216c:	af ab       	std	Y+55, r26	; 0x37
    216e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2170:	6d a9       	ldd	r22, Y+53	; 0x35
    2172:	7e a9       	ldd	r23, Y+54	; 0x36
    2174:	8f a9       	ldd	r24, Y+55	; 0x37
    2176:	98 ad       	ldd	r25, Y+56	; 0x38
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	4a ef       	ldi	r20, 0xFA	; 250
    217e:	54 e4       	ldi	r21, 0x44	; 68
    2180:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	89 ab       	std	Y+49, r24	; 0x31
    218a:	9a ab       	std	Y+50, r25	; 0x32
    218c:	ab ab       	std	Y+51, r26	; 0x33
    218e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2190:	69 a9       	ldd	r22, Y+49	; 0x31
    2192:	7a a9       	ldd	r23, Y+50	; 0x32
    2194:	8b a9       	ldd	r24, Y+51	; 0x33
    2196:	9c a9       	ldd	r25, Y+52	; 0x34
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	40 e8       	ldi	r20, 0x80	; 128
    219e:	5f e3       	ldi	r21, 0x3F	; 63
    21a0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21a4:	88 23       	and	r24, r24
    21a6:	2c f4       	brge	.+10     	; 0x21b2 <main+0xc0>
		__ticks = 1;
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	98 ab       	std	Y+48, r25	; 0x30
    21ae:	8f a7       	std	Y+47, r24	; 0x2f
    21b0:	3f c0       	rjmp	.+126    	; 0x2230 <main+0x13e>
	else if (__tmp > 65535)
    21b2:	69 a9       	ldd	r22, Y+49	; 0x31
    21b4:	7a a9       	ldd	r23, Y+50	; 0x32
    21b6:	8b a9       	ldd	r24, Y+51	; 0x33
    21b8:	9c a9       	ldd	r25, Y+52	; 0x34
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	3f ef       	ldi	r19, 0xFF	; 255
    21be:	4f e7       	ldi	r20, 0x7F	; 127
    21c0:	57 e4       	ldi	r21, 0x47	; 71
    21c2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21c6:	18 16       	cp	r1, r24
    21c8:	4c f5       	brge	.+82     	; 0x221c <main+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ca:	6d a9       	ldd	r22, Y+53	; 0x35
    21cc:	7e a9       	ldd	r23, Y+54	; 0x36
    21ce:	8f a9       	ldd	r24, Y+55	; 0x37
    21d0:	98 ad       	ldd	r25, Y+56	; 0x38
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	40 e2       	ldi	r20, 0x20	; 32
    21d8:	51 e4       	ldi	r21, 0x41	; 65
    21da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	bc 01       	movw	r22, r24
    21e4:	cd 01       	movw	r24, r26
    21e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	98 ab       	std	Y+48, r25	; 0x30
    21f0:	8f a7       	std	Y+47, r24	; 0x2f
    21f2:	0f c0       	rjmp	.+30     	; 0x2212 <main+0x120>
    21f4:	88 ec       	ldi	r24, 0xC8	; 200
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	9e a7       	std	Y+46, r25	; 0x2e
    21fa:	8d a7       	std	Y+45, r24	; 0x2d
    21fc:	8d a5       	ldd	r24, Y+45	; 0x2d
    21fe:	9e a5       	ldd	r25, Y+46	; 0x2e
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	f1 f7       	brne	.-4      	; 0x2200 <main+0x10e>
    2204:	9e a7       	std	Y+46, r25	; 0x2e
    2206:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2208:	8f a5       	ldd	r24, Y+47	; 0x2f
    220a:	98 a9       	ldd	r25, Y+48	; 0x30
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	98 ab       	std	Y+48, r25	; 0x30
    2210:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2212:	8f a5       	ldd	r24, Y+47	; 0x2f
    2214:	98 a9       	ldd	r25, Y+48	; 0x30
    2216:	00 97       	sbiw	r24, 0x00	; 0
    2218:	69 f7       	brne	.-38     	; 0x21f4 <main+0x102>
    221a:	14 c0       	rjmp	.+40     	; 0x2244 <main+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    221c:	69 a9       	ldd	r22, Y+49	; 0x31
    221e:	7a a9       	ldd	r23, Y+50	; 0x32
    2220:	8b a9       	ldd	r24, Y+51	; 0x33
    2222:	9c a9       	ldd	r25, Y+52	; 0x34
    2224:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	98 ab       	std	Y+48, r25	; 0x30
    222e:	8f a7       	std	Y+47, r24	; 0x2f
    2230:	8f a5       	ldd	r24, Y+47	; 0x2f
    2232:	98 a9       	ldd	r25, Y+48	; 0x30
    2234:	9c a7       	std	Y+44, r25	; 0x2c
    2236:	8b a7       	std	Y+43, r24	; 0x2b
    2238:	8b a5       	ldd	r24, Y+43	; 0x2b
    223a:	9c a5       	ldd	r25, Y+44	; 0x2c
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	f1 f7       	brne	.-4      	; 0x223c <main+0x14a>
    2240:	9c a7       	std	Y+44, r25	; 0x2c
    2242:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);
	LCD_voidGoTo_XY ( LINE_2 ,3);
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	63 e0       	ldi	r22, 0x03	; 3
    2248:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <LCD_voidGoTo_XY>
	LCD_voidWriteString ("ES Engineer");
    224c:	81 e7       	ldi	r24, 0x71	; 113
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <LCD_voidWriteString>
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	a6 e9       	ldi	r26, 0x96	; 150
    225a:	b4 e4       	ldi	r27, 0x44	; 68
    225c:	8f a3       	std	Y+39, r24	; 0x27
    225e:	98 a7       	std	Y+40, r25	; 0x28
    2260:	a9 a7       	std	Y+41, r26	; 0x29
    2262:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2264:	6f a1       	ldd	r22, Y+39	; 0x27
    2266:	78 a5       	ldd	r23, Y+40	; 0x28
    2268:	89 a5       	ldd	r24, Y+41	; 0x29
    226a:	9a a5       	ldd	r25, Y+42	; 0x2a
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	4a ef       	ldi	r20, 0xFA	; 250
    2272:	54 e4       	ldi	r21, 0x44	; 68
    2274:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	8b a3       	std	Y+35, r24	; 0x23
    227e:	9c a3       	std	Y+36, r25	; 0x24
    2280:	ad a3       	std	Y+37, r26	; 0x25
    2282:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2284:	6b a1       	ldd	r22, Y+35	; 0x23
    2286:	7c a1       	ldd	r23, Y+36	; 0x24
    2288:	8d a1       	ldd	r24, Y+37	; 0x25
    228a:	9e a1       	ldd	r25, Y+38	; 0x26
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	40 e8       	ldi	r20, 0x80	; 128
    2292:	5f e3       	ldi	r21, 0x3F	; 63
    2294:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2298:	88 23       	and	r24, r24
    229a:	2c f4       	brge	.+10     	; 0x22a6 <main+0x1b4>
		__ticks = 1;
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	9a a3       	std	Y+34, r25	; 0x22
    22a2:	89 a3       	std	Y+33, r24	; 0x21
    22a4:	3f c0       	rjmp	.+126    	; 0x2324 <main+0x232>
	else if (__tmp > 65535)
    22a6:	6b a1       	ldd	r22, Y+35	; 0x23
    22a8:	7c a1       	ldd	r23, Y+36	; 0x24
    22aa:	8d a1       	ldd	r24, Y+37	; 0x25
    22ac:	9e a1       	ldd	r25, Y+38	; 0x26
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	3f ef       	ldi	r19, 0xFF	; 255
    22b2:	4f e7       	ldi	r20, 0x7F	; 127
    22b4:	57 e4       	ldi	r21, 0x47	; 71
    22b6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22ba:	18 16       	cp	r1, r24
    22bc:	4c f5       	brge	.+82     	; 0x2310 <main+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22be:	6f a1       	ldd	r22, Y+39	; 0x27
    22c0:	78 a5       	ldd	r23, Y+40	; 0x28
    22c2:	89 a5       	ldd	r24, Y+41	; 0x29
    22c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	40 e2       	ldi	r20, 0x20	; 32
    22cc:	51 e4       	ldi	r21, 0x41	; 65
    22ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	bc 01       	movw	r22, r24
    22d8:	cd 01       	movw	r24, r26
    22da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	9a a3       	std	Y+34, r25	; 0x22
    22e4:	89 a3       	std	Y+33, r24	; 0x21
    22e6:	0f c0       	rjmp	.+30     	; 0x2306 <main+0x214>
    22e8:	88 ec       	ldi	r24, 0xC8	; 200
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	98 a3       	std	Y+32, r25	; 0x20
    22ee:	8f 8f       	std	Y+31, r24	; 0x1f
    22f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22f2:	98 a1       	ldd	r25, Y+32	; 0x20
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	f1 f7       	brne	.-4      	; 0x22f4 <main+0x202>
    22f8:	98 a3       	std	Y+32, r25	; 0x20
    22fa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22fc:	89 a1       	ldd	r24, Y+33	; 0x21
    22fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	9a a3       	std	Y+34, r25	; 0x22
    2304:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2306:	89 a1       	ldd	r24, Y+33	; 0x21
    2308:	9a a1       	ldd	r25, Y+34	; 0x22
    230a:	00 97       	sbiw	r24, 0x00	; 0
    230c:	69 f7       	brne	.-38     	; 0x22e8 <main+0x1f6>
    230e:	14 c0       	rjmp	.+40     	; 0x2338 <main+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2310:	6b a1       	ldd	r22, Y+35	; 0x23
    2312:	7c a1       	ldd	r23, Y+36	; 0x24
    2314:	8d a1       	ldd	r24, Y+37	; 0x25
    2316:	9e a1       	ldd	r25, Y+38	; 0x26
    2318:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	9a a3       	std	Y+34, r25	; 0x22
    2322:	89 a3       	std	Y+33, r24	; 0x21
    2324:	89 a1       	ldd	r24, Y+33	; 0x21
    2326:	9a a1       	ldd	r25, Y+34	; 0x22
    2328:	9e 8f       	std	Y+30, r25	; 0x1e
    232a:	8d 8f       	std	Y+29, r24	; 0x1d
    232c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    232e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	f1 f7       	brne	.-4      	; 0x2330 <main+0x23e>
    2334:	9e 8f       	std	Y+30, r25	; 0x1e
    2336:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1200);
	LCD_voidClearDisplay();
    2338:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <LCD_voidClearDisplay>

	LCD_voidGoTo_XY ( LINE_1 ,3);
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	63 e0       	ldi	r22, 0x03	; 3
    2340:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <LCD_voidGoTo_XY>
	LCD_voidWriteString ("   Welcome To");
    2344:	8d e7       	ldi	r24, 0x7D	; 125
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <LCD_voidWriteString>
    234c:	80 e0       	ldi	r24, 0x00	; 0
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	a8 ec       	ldi	r26, 0xC8	; 200
    2352:	b2 e4       	ldi	r27, 0x42	; 66
    2354:	89 8f       	std	Y+25, r24	; 0x19
    2356:	9a 8f       	std	Y+26, r25	; 0x1a
    2358:	ab 8f       	std	Y+27, r26	; 0x1b
    235a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235c:	69 8d       	ldd	r22, Y+25	; 0x19
    235e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2360:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2362:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	4a ef       	ldi	r20, 0xFA	; 250
    236a:	54 e4       	ldi	r21, 0x44	; 68
    236c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	8d 8b       	std	Y+21, r24	; 0x15
    2376:	9e 8b       	std	Y+22, r25	; 0x16
    2378:	af 8b       	std	Y+23, r26	; 0x17
    237a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    237c:	6d 89       	ldd	r22, Y+21	; 0x15
    237e:	7e 89       	ldd	r23, Y+22	; 0x16
    2380:	8f 89       	ldd	r24, Y+23	; 0x17
    2382:	98 8d       	ldd	r25, Y+24	; 0x18
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	40 e8       	ldi	r20, 0x80	; 128
    238a:	5f e3       	ldi	r21, 0x3F	; 63
    238c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2390:	88 23       	and	r24, r24
    2392:	2c f4       	brge	.+10     	; 0x239e <main+0x2ac>
		__ticks = 1;
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	9c 8b       	std	Y+20, r25	; 0x14
    239a:	8b 8b       	std	Y+19, r24	; 0x13
    239c:	3f c0       	rjmp	.+126    	; 0x241c <main+0x32a>
	else if (__tmp > 65535)
    239e:	6d 89       	ldd	r22, Y+21	; 0x15
    23a0:	7e 89       	ldd	r23, Y+22	; 0x16
    23a2:	8f 89       	ldd	r24, Y+23	; 0x17
    23a4:	98 8d       	ldd	r25, Y+24	; 0x18
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	3f ef       	ldi	r19, 0xFF	; 255
    23aa:	4f e7       	ldi	r20, 0x7F	; 127
    23ac:	57 e4       	ldi	r21, 0x47	; 71
    23ae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23b2:	18 16       	cp	r1, r24
    23b4:	4c f5       	brge	.+82     	; 0x2408 <main+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b6:	69 8d       	ldd	r22, Y+25	; 0x19
    23b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	40 e2       	ldi	r20, 0x20	; 32
    23c4:	51 e4       	ldi	r21, 0x41	; 65
    23c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	bc 01       	movw	r22, r24
    23d0:	cd 01       	movw	r24, r26
    23d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	9c 8b       	std	Y+20, r25	; 0x14
    23dc:	8b 8b       	std	Y+19, r24	; 0x13
    23de:	0f c0       	rjmp	.+30     	; 0x23fe <main+0x30c>
    23e0:	88 ec       	ldi	r24, 0xC8	; 200
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	9a 8b       	std	Y+18, r25	; 0x12
    23e6:	89 8b       	std	Y+17, r24	; 0x11
    23e8:	89 89       	ldd	r24, Y+17	; 0x11
    23ea:	9a 89       	ldd	r25, Y+18	; 0x12
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	f1 f7       	brne	.-4      	; 0x23ec <main+0x2fa>
    23f0:	9a 8b       	std	Y+18, r25	; 0x12
    23f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f4:	8b 89       	ldd	r24, Y+19	; 0x13
    23f6:	9c 89       	ldd	r25, Y+20	; 0x14
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	9c 8b       	std	Y+20, r25	; 0x14
    23fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2400:	9c 89       	ldd	r25, Y+20	; 0x14
    2402:	00 97       	sbiw	r24, 0x00	; 0
    2404:	69 f7       	brne	.-38     	; 0x23e0 <main+0x2ee>
    2406:	14 c0       	rjmp	.+40     	; 0x2430 <main+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2408:	6d 89       	ldd	r22, Y+21	; 0x15
    240a:	7e 89       	ldd	r23, Y+22	; 0x16
    240c:	8f 89       	ldd	r24, Y+23	; 0x17
    240e:	98 8d       	ldd	r25, Y+24	; 0x18
    2410:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	9c 8b       	std	Y+20, r25	; 0x14
    241a:	8b 8b       	std	Y+19, r24	; 0x13
    241c:	8b 89       	ldd	r24, Y+19	; 0x13
    241e:	9c 89       	ldd	r25, Y+20	; 0x14
    2420:	98 8b       	std	Y+16, r25	; 0x10
    2422:	8f 87       	std	Y+15, r24	; 0x0f
    2424:	8f 85       	ldd	r24, Y+15	; 0x0f
    2426:	98 89       	ldd	r25, Y+16	; 0x10
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	f1 f7       	brne	.-4      	; 0x2428 <main+0x336>
    242c:	98 8b       	std	Y+16, r25	; 0x10
    242e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	LCD_voidGoTo_XY ( LINE_2 ,2);
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	62 e0       	ldi	r22, 0x02	; 2
    2434:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <LCD_voidGoTo_XY>
	LCD_voidWriteString ("MY Calculator");
    2438:	8b e8       	ldi	r24, 0x8B	; 139
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <LCD_voidWriteString>
    2440:	80 e0       	ldi	r24, 0x00	; 0
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	a6 e9       	ldi	r26, 0x96	; 150
    2446:	b4 e4       	ldi	r27, 0x44	; 68
    2448:	8b 87       	std	Y+11, r24	; 0x0b
    244a:	9c 87       	std	Y+12, r25	; 0x0c
    244c:	ad 87       	std	Y+13, r26	; 0x0d
    244e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2450:	6b 85       	ldd	r22, Y+11	; 0x0b
    2452:	7c 85       	ldd	r23, Y+12	; 0x0c
    2454:	8d 85       	ldd	r24, Y+13	; 0x0d
    2456:	9e 85       	ldd	r25, Y+14	; 0x0e
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	4a ef       	ldi	r20, 0xFA	; 250
    245e:	54 e4       	ldi	r21, 0x44	; 68
    2460:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	8f 83       	std	Y+7, r24	; 0x07
    246a:	98 87       	std	Y+8, r25	; 0x08
    246c:	a9 87       	std	Y+9, r26	; 0x09
    246e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2470:	6f 81       	ldd	r22, Y+7	; 0x07
    2472:	78 85       	ldd	r23, Y+8	; 0x08
    2474:	89 85       	ldd	r24, Y+9	; 0x09
    2476:	9a 85       	ldd	r25, Y+10	; 0x0a
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	40 e8       	ldi	r20, 0x80	; 128
    247e:	5f e3       	ldi	r21, 0x3F	; 63
    2480:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2484:	88 23       	and	r24, r24
    2486:	2c f4       	brge	.+10     	; 0x2492 <main+0x3a0>
		__ticks = 1;
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	9e 83       	std	Y+6, r25	; 0x06
    248e:	8d 83       	std	Y+5, r24	; 0x05
    2490:	3f c0       	rjmp	.+126    	; 0x2510 <main+0x41e>
	else if (__tmp > 65535)
    2492:	6f 81       	ldd	r22, Y+7	; 0x07
    2494:	78 85       	ldd	r23, Y+8	; 0x08
    2496:	89 85       	ldd	r24, Y+9	; 0x09
    2498:	9a 85       	ldd	r25, Y+10	; 0x0a
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	3f ef       	ldi	r19, 0xFF	; 255
    249e:	4f e7       	ldi	r20, 0x7F	; 127
    24a0:	57 e4       	ldi	r21, 0x47	; 71
    24a2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24a6:	18 16       	cp	r1, r24
    24a8:	4c f5       	brge	.+82     	; 0x24fc <main+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	40 e2       	ldi	r20, 0x20	; 32
    24b8:	51 e4       	ldi	r21, 0x41	; 65
    24ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	bc 01       	movw	r22, r24
    24c4:	cd 01       	movw	r24, r26
    24c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	9e 83       	std	Y+6, r25	; 0x06
    24d0:	8d 83       	std	Y+5, r24	; 0x05
    24d2:	0f c0       	rjmp	.+30     	; 0x24f2 <main+0x400>
    24d4:	88 ec       	ldi	r24, 0xC8	; 200
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	9c 83       	std	Y+4, r25	; 0x04
    24da:	8b 83       	std	Y+3, r24	; 0x03
    24dc:	8b 81       	ldd	r24, Y+3	; 0x03
    24de:	9c 81       	ldd	r25, Y+4	; 0x04
    24e0:	01 97       	sbiw	r24, 0x01	; 1
    24e2:	f1 f7       	brne	.-4      	; 0x24e0 <main+0x3ee>
    24e4:	9c 83       	std	Y+4, r25	; 0x04
    24e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ea:	9e 81       	ldd	r25, Y+6	; 0x06
    24ec:	01 97       	sbiw	r24, 0x01	; 1
    24ee:	9e 83       	std	Y+6, r25	; 0x06
    24f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f2:	8d 81       	ldd	r24, Y+5	; 0x05
    24f4:	9e 81       	ldd	r25, Y+6	; 0x06
    24f6:	00 97       	sbiw	r24, 0x00	; 0
    24f8:	69 f7       	brne	.-38     	; 0x24d4 <main+0x3e2>
    24fa:	14 c0       	rjmp	.+40     	; 0x2524 <main+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24fc:	6f 81       	ldd	r22, Y+7	; 0x07
    24fe:	78 85       	ldd	r23, Y+8	; 0x08
    2500:	89 85       	ldd	r24, Y+9	; 0x09
    2502:	9a 85       	ldd	r25, Y+10	; 0x0a
    2504:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	9e 83       	std	Y+6, r25	; 0x06
    250e:	8d 83       	std	Y+5, r24	; 0x05
    2510:	8d 81       	ldd	r24, Y+5	; 0x05
    2512:	9e 81       	ldd	r25, Y+6	; 0x06
    2514:	9a 83       	std	Y+2, r25	; 0x02
    2516:	89 83       	std	Y+1, r24	; 0x01
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	9a 81       	ldd	r25, Y+2	; 0x02
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	f1 f7       	brne	.-4      	; 0x251c <main+0x42a>
    2520:	9a 83       	std	Y+2, r25	; 0x02
    2522:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1200);

	LCD_voidClearDisplay();
    2524:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <LCD_voidClearDisplay>

	while (1)
	{

			Local_u8PressedKey = KPAD_u8GetPressedKey ();
    2528:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <KPAD_u8GetPressedKey>
    252c:	89 af       	std	Y+57, r24	; 0x39
			if ( Local_u8PressedKey != 0xff )
    252e:	89 ad       	ldd	r24, Y+57	; 0x39
    2530:	8f 3f       	cpi	r24, 0xFF	; 255
    2532:	d1 f3       	breq	.-12     	; 0x2528 <main+0x436>
			{

				if( Local_u8PressedKey >= '0' && Local_u8PressedKey <= '9' )
    2534:	89 ad       	ldd	r24, Y+57	; 0x39
    2536:	80 33       	cpi	r24, 0x30	; 48
    2538:	08 f4       	brcc	.+2      	; 0x253c <main+0x44a>
    253a:	72 c0       	rjmp	.+228    	; 0x2620 <main+0x52e>
    253c:	89 ad       	ldd	r24, Y+57	; 0x39
    253e:	8a 33       	cpi	r24, 0x3A	; 58
    2540:	08 f0       	brcs	.+2      	; 0x2544 <main+0x452>
    2542:	6e c0       	rjmp	.+220    	; 0x2620 <main+0x52e>
				{
					if ( operator_flag == 0 )
    2544:	fe 01       	movw	r30, r28
    2546:	ee 5b       	subi	r30, 0xBE	; 190
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	80 81       	ld	r24, Z
    254c:	88 23       	and	r24, r24
    254e:	a1 f5       	brne	.+104    	; 0x25b8 <main+0x4c6>
					{
						LCD_voidWriteChar(Local_u8PressedKey);
    2550:	89 ad       	ldd	r24, Y+57	; 0x39
    2552:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <LCD_voidWriteChar>
						Copy_u8Temp = Copy_u8Temp*10 + (Local_u8PressedKey - '0') ;
    2556:	fe 01       	movw	r30, r28
    2558:	fe 96       	adiw	r30, 0x3e	; 62
    255a:	80 81       	ld	r24, Z
    255c:	91 81       	ldd	r25, Z+1	; 0x01
    255e:	a2 81       	ldd	r26, Z+2	; 0x02
    2560:	b3 81       	ldd	r27, Z+3	; 0x03
    2562:	2a e0       	ldi	r18, 0x0A	; 10
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	40 e0       	ldi	r20, 0x00	; 0
    2568:	50 e0       	ldi	r21, 0x00	; 0
    256a:	bc 01       	movw	r22, r24
    256c:	cd 01       	movw	r24, r26
    256e:	0e 94 fd 13 	call	0x27fa	; 0x27fa <__mulsi3>
    2572:	9b 01       	movw	r18, r22
    2574:	ac 01       	movw	r20, r24
    2576:	89 ad       	ldd	r24, Y+57	; 0x39
    2578:	88 2f       	mov	r24, r24
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	c0 97       	sbiw	r24, 0x30	; 48
    257e:	aa 27       	eor	r26, r26
    2580:	97 fd       	sbrc	r25, 7
    2582:	a0 95       	com	r26
    2584:	ba 2f       	mov	r27, r26
    2586:	fe 01       	movw	r30, r28
    2588:	fe 96       	adiw	r30, 0x3e	; 62
    258a:	82 0f       	add	r24, r18
    258c:	93 1f       	adc	r25, r19
    258e:	a4 1f       	adc	r26, r20
    2590:	b5 1f       	adc	r27, r21
    2592:	80 83       	st	Z, r24
    2594:	91 83       	std	Z+1, r25	; 0x01
    2596:	a2 83       	std	Z+2, r26	; 0x02
    2598:	b3 83       	std	Z+3, r27	; 0x03
						operand_1 = Copy_u8Temp ;
    259a:	9e 01       	movw	r18, r28
    259c:	28 5b       	subi	r18, 0xB8	; 184
    259e:	3f 4f       	sbci	r19, 0xFF	; 255
    25a0:	fe 01       	movw	r30, r28
    25a2:	fe 96       	adiw	r30, 0x3e	; 62
    25a4:	80 81       	ld	r24, Z
    25a6:	91 81       	ldd	r25, Z+1	; 0x01
    25a8:	a2 81       	ldd	r26, Z+2	; 0x02
    25aa:	b3 81       	ldd	r27, Z+3	; 0x03
    25ac:	f9 01       	movw	r30, r18
    25ae:	80 83       	st	Z, r24
    25b0:	91 83       	std	Z+1, r25	; 0x01
    25b2:	a2 83       	std	Z+2, r26	; 0x02
    25b4:	b3 83       	std	Z+3, r27	; 0x03
    25b6:	b8 cf       	rjmp	.-144    	; 0x2528 <main+0x436>
					}
					else
					{
						LCD_voidWriteChar(Local_u8PressedKey);
    25b8:	89 ad       	ldd	r24, Y+57	; 0x39
    25ba:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <LCD_voidWriteChar>
						Copy_u8Temp = Copy_u8Temp*10 + (Local_u8PressedKey - '0') ;
    25be:	fe 01       	movw	r30, r28
    25c0:	fe 96       	adiw	r30, 0x3e	; 62
    25c2:	80 81       	ld	r24, Z
    25c4:	91 81       	ldd	r25, Z+1	; 0x01
    25c6:	a2 81       	ldd	r26, Z+2	; 0x02
    25c8:	b3 81       	ldd	r27, Z+3	; 0x03
    25ca:	2a e0       	ldi	r18, 0x0A	; 10
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e0       	ldi	r20, 0x00	; 0
    25d0:	50 e0       	ldi	r21, 0x00	; 0
    25d2:	bc 01       	movw	r22, r24
    25d4:	cd 01       	movw	r24, r26
    25d6:	0e 94 fd 13 	call	0x27fa	; 0x27fa <__mulsi3>
    25da:	9b 01       	movw	r18, r22
    25dc:	ac 01       	movw	r20, r24
    25de:	89 ad       	ldd	r24, Y+57	; 0x39
    25e0:	88 2f       	mov	r24, r24
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	c0 97       	sbiw	r24, 0x30	; 48
    25e6:	aa 27       	eor	r26, r26
    25e8:	97 fd       	sbrc	r25, 7
    25ea:	a0 95       	com	r26
    25ec:	ba 2f       	mov	r27, r26
    25ee:	fe 01       	movw	r30, r28
    25f0:	fe 96       	adiw	r30, 0x3e	; 62
    25f2:	82 0f       	add	r24, r18
    25f4:	93 1f       	adc	r25, r19
    25f6:	a4 1f       	adc	r26, r20
    25f8:	b5 1f       	adc	r27, r21
    25fa:	80 83       	st	Z, r24
    25fc:	91 83       	std	Z+1, r25	; 0x01
    25fe:	a2 83       	std	Z+2, r26	; 0x02
    2600:	b3 83       	std	Z+3, r27	; 0x03
						operand_2 = Copy_u8Temp ;
    2602:	9e 01       	movw	r18, r28
    2604:	2c 5b       	subi	r18, 0xBC	; 188
    2606:	3f 4f       	sbci	r19, 0xFF	; 255
    2608:	fe 01       	movw	r30, r28
    260a:	fe 96       	adiw	r30, 0x3e	; 62
    260c:	80 81       	ld	r24, Z
    260e:	91 81       	ldd	r25, Z+1	; 0x01
    2610:	a2 81       	ldd	r26, Z+2	; 0x02
    2612:	b3 81       	ldd	r27, Z+3	; 0x03
    2614:	f9 01       	movw	r30, r18
    2616:	80 83       	st	Z, r24
    2618:	91 83       	std	Z+1, r25	; 0x01
    261a:	a2 83       	std	Z+2, r26	; 0x02
    261c:	b3 83       	std	Z+3, r27	; 0x03
    261e:	84 cf       	rjmp	.-248    	; 0x2528 <main+0x436>
					}
				}
				else if ( Local_u8PressedKey == '=' )
    2620:	89 ad       	ldd	r24, Y+57	; 0x39
    2622:	8d 33       	cpi	r24, 0x3D	; 61
    2624:	09 f0       	breq	.+2      	; 0x2628 <main+0x536>
    2626:	ac c0       	rjmp	.+344    	; 0x2780 <main+0x68e>
				{
					LCD_voidWriteChar(Local_u8PressedKey);
    2628:	89 ad       	ldd	r24, Y+57	; 0x39
    262a:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <LCD_voidWriteChar>
					// Operation
					switch(operator)
    262e:	fe 01       	movw	r30, r28
    2630:	ed 5b       	subi	r30, 0xBD	; 189
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	80 81       	ld	r24, Z
    2636:	e8 2e       	mov	r14, r24
    2638:	ff 24       	eor	r15, r15
    263a:	2e 96       	adiw	r28, 0x0e	; 14
    263c:	ff ae       	std	Y+63, r15	; 0x3f
    263e:	ee ae       	std	Y+62, r14	; 0x3e
    2640:	2e 97       	sbiw	r28, 0x0e	; 14
    2642:	2e 96       	adiw	r28, 0x0e	; 14
    2644:	0e ad       	ldd	r16, Y+62	; 0x3e
    2646:	1f ad       	ldd	r17, Y+63	; 0x3f
    2648:	2e 97       	sbiw	r28, 0x0e	; 14
    264a:	0b 32       	cpi	r16, 0x2B	; 43
    264c:	11 05       	cpc	r17, r1
    264e:	01 f1       	breq	.+64     	; 0x2690 <main+0x59e>
    2650:	2e 96       	adiw	r28, 0x0e	; 14
    2652:	2e ad       	ldd	r18, Y+62	; 0x3e
    2654:	3f ad       	ldd	r19, Y+63	; 0x3f
    2656:	2e 97       	sbiw	r28, 0x0e	; 14
    2658:	2c 32       	cpi	r18, 0x2C	; 44
    265a:	31 05       	cpc	r19, r1
    265c:	4c f4       	brge	.+18     	; 0x2670 <main+0x57e>
    265e:	2e 96       	adiw	r28, 0x0e	; 14
    2660:	8e ad       	ldd	r24, Y+62	; 0x3e
    2662:	9f ad       	ldd	r25, Y+63	; 0x3f
    2664:	2e 97       	sbiw	r28, 0x0e	; 14
    2666:	8a 32       	cpi	r24, 0x2A	; 42
    2668:	91 05       	cpc	r25, r1
    266a:	09 f4       	brne	.+2      	; 0x266e <main+0x57c>
    266c:	45 c0       	rjmp	.+138    	; 0x26f8 <main+0x606>
    266e:	77 c0       	rjmp	.+238    	; 0x275e <main+0x66c>
    2670:	2e 96       	adiw	r28, 0x0e	; 14
    2672:	ee ad       	ldd	r30, Y+62	; 0x3e
    2674:	ff ad       	ldd	r31, Y+63	; 0x3f
    2676:	2e 97       	sbiw	r28, 0x0e	; 14
    2678:	ed 32       	cpi	r30, 0x2D	; 45
    267a:	f1 05       	cpc	r31, r1
    267c:	09 f1       	breq	.+66     	; 0x26c0 <main+0x5ce>
    267e:	2e 96       	adiw	r28, 0x0e	; 14
    2680:	0e ad       	ldd	r16, Y+62	; 0x3e
    2682:	1f ad       	ldd	r17, Y+63	; 0x3f
    2684:	2e 97       	sbiw	r28, 0x0e	; 14
    2686:	0f 32       	cpi	r16, 0x2F	; 47
    2688:	11 05       	cpc	r17, r1
    268a:	09 f4       	brne	.+2      	; 0x268e <main+0x59c>
    268c:	4f c0       	rjmp	.+158    	; 0x272c <main+0x63a>
    268e:	67 c0       	rjmp	.+206    	; 0x275e <main+0x66c>
					{
						case '+' : Result = operand_1 + operand_2 ;    break;
    2690:	fe 01       	movw	r30, r28
    2692:	e8 5b       	subi	r30, 0xB8	; 184
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	de 01       	movw	r26, r28
    2698:	ac 5b       	subi	r26, 0xBC	; 188
    269a:	bf 4f       	sbci	r27, 0xFF	; 255
    269c:	20 81       	ld	r18, Z
    269e:	31 81       	ldd	r19, Z+1	; 0x01
    26a0:	42 81       	ldd	r20, Z+2	; 0x02
    26a2:	53 81       	ldd	r21, Z+3	; 0x03
    26a4:	8d 91       	ld	r24, X+
    26a6:	9d 91       	ld	r25, X+
    26a8:	0d 90       	ld	r0, X+
    26aa:	bc 91       	ld	r27, X
    26ac:	a0 2d       	mov	r26, r0
    26ae:	82 0f       	add	r24, r18
    26b0:	93 1f       	adc	r25, r19
    26b2:	a4 1f       	adc	r26, r20
    26b4:	b5 1f       	adc	r27, r21
    26b6:	8a af       	std	Y+58, r24	; 0x3a
    26b8:	9b af       	std	Y+59, r25	; 0x3b
    26ba:	ac af       	std	Y+60, r26	; 0x3c
    26bc:	bd af       	std	Y+61, r27	; 0x3d
    26be:	4f c0       	rjmp	.+158    	; 0x275e <main+0x66c>
						case '-' : Result = operand_1 - operand_2 ;    break;
    26c0:	fe 01       	movw	r30, r28
    26c2:	e8 5b       	subi	r30, 0xB8	; 184
    26c4:	ff 4f       	sbci	r31, 0xFF	; 255
    26c6:	de 01       	movw	r26, r28
    26c8:	ac 5b       	subi	r26, 0xBC	; 188
    26ca:	bf 4f       	sbci	r27, 0xFF	; 255
    26cc:	20 81       	ld	r18, Z
    26ce:	31 81       	ldd	r19, Z+1	; 0x01
    26d0:	42 81       	ldd	r20, Z+2	; 0x02
    26d2:	53 81       	ldd	r21, Z+3	; 0x03
    26d4:	8d 91       	ld	r24, X+
    26d6:	9d 91       	ld	r25, X+
    26d8:	0d 90       	ld	r0, X+
    26da:	bc 91       	ld	r27, X
    26dc:	a0 2d       	mov	r26, r0
    26de:	79 01       	movw	r14, r18
    26e0:	8a 01       	movw	r16, r20
    26e2:	e8 1a       	sub	r14, r24
    26e4:	f9 0a       	sbc	r15, r25
    26e6:	0a 0b       	sbc	r16, r26
    26e8:	1b 0b       	sbc	r17, r27
    26ea:	d8 01       	movw	r26, r16
    26ec:	c7 01       	movw	r24, r14
    26ee:	8a af       	std	Y+58, r24	; 0x3a
    26f0:	9b af       	std	Y+59, r25	; 0x3b
    26f2:	ac af       	std	Y+60, r26	; 0x3c
    26f4:	bd af       	std	Y+61, r27	; 0x3d
    26f6:	33 c0       	rjmp	.+102    	; 0x275e <main+0x66c>
						case '*' : Result = operand_1 * operand_2 ;    break;
    26f8:	fe 01       	movw	r30, r28
    26fa:	e8 5b       	subi	r30, 0xB8	; 184
    26fc:	ff 4f       	sbci	r31, 0xFF	; 255
    26fe:	9e 01       	movw	r18, r28
    2700:	2c 5b       	subi	r18, 0xBC	; 188
    2702:	3f 4f       	sbci	r19, 0xFF	; 255
    2704:	80 81       	ld	r24, Z
    2706:	91 81       	ldd	r25, Z+1	; 0x01
    2708:	a2 81       	ldd	r26, Z+2	; 0x02
    270a:	b3 81       	ldd	r27, Z+3	; 0x03
    270c:	f9 01       	movw	r30, r18
    270e:	20 81       	ld	r18, Z
    2710:	31 81       	ldd	r19, Z+1	; 0x01
    2712:	42 81       	ldd	r20, Z+2	; 0x02
    2714:	53 81       	ldd	r21, Z+3	; 0x03
    2716:	bc 01       	movw	r22, r24
    2718:	cd 01       	movw	r24, r26
    271a:	0e 94 fd 13 	call	0x27fa	; 0x27fa <__mulsi3>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	8a af       	std	Y+58, r24	; 0x3a
    2724:	9b af       	std	Y+59, r25	; 0x3b
    2726:	ac af       	std	Y+60, r26	; 0x3c
    2728:	bd af       	std	Y+61, r27	; 0x3d
    272a:	19 c0       	rjmp	.+50     	; 0x275e <main+0x66c>
						case '/' : Result = operand_1 / operand_2 ;    break;
    272c:	fe 01       	movw	r30, r28
    272e:	e8 5b       	subi	r30, 0xB8	; 184
    2730:	ff 4f       	sbci	r31, 0xFF	; 255
    2732:	9e 01       	movw	r18, r28
    2734:	2c 5b       	subi	r18, 0xBC	; 188
    2736:	3f 4f       	sbci	r19, 0xFF	; 255
    2738:	80 81       	ld	r24, Z
    273a:	91 81       	ldd	r25, Z+1	; 0x01
    273c:	a2 81       	ldd	r26, Z+2	; 0x02
    273e:	b3 81       	ldd	r27, Z+3	; 0x03
    2740:	f9 01       	movw	r30, r18
    2742:	20 81       	ld	r18, Z
    2744:	31 81       	ldd	r19, Z+1	; 0x01
    2746:	42 81       	ldd	r20, Z+2	; 0x02
    2748:	53 81       	ldd	r21, Z+3	; 0x03
    274a:	bc 01       	movw	r22, r24
    274c:	cd 01       	movw	r24, r26
    274e:	0e 94 1c 14 	call	0x2838	; 0x2838 <__udivmodsi4>
    2752:	da 01       	movw	r26, r20
    2754:	c9 01       	movw	r24, r18
    2756:	8a af       	std	Y+58, r24	; 0x3a
    2758:	9b af       	std	Y+59, r25	; 0x3b
    275a:	ac af       	std	Y+60, r26	; 0x3c
    275c:	bd af       	std	Y+61, r27	; 0x3d
					}
					LCD_voidGoTo_XY ( LINE_2 ,0);
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	60 e0       	ldi	r22, 0x00	; 0
    2762:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <LCD_voidGoTo_XY>
					LCD_voidWriteString ("Res =  ");
    2766:	89 e9       	ldi	r24, 0x99	; 153
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <LCD_voidWriteString>
					LCD_voidWrite_u32Number (Result);
    276e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2770:	9b ad       	ldd	r25, Y+59	; 0x3b
    2772:	ac ad       	ldd	r26, Y+60	; 0x3c
    2774:	bd ad       	ldd	r27, Y+61	; 0x3d
    2776:	bc 01       	movw	r22, r24
    2778:	cd 01       	movw	r24, r26
    277a:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <LCD_voidWrite_u32Number>
    277e:	d4 ce       	rjmp	.-600    	; 0x2528 <main+0x436>
				}
				else if ( Local_u8PressedKey == '#' )
    2780:	89 ad       	ldd	r24, Y+57	; 0x39
    2782:	83 32       	cpi	r24, 0x23	; 35
    2784:	19 f5       	brne	.+70     	; 0x27cc <main+0x6da>
				{
					operand_1     = 0 ;
    2786:	fe 01       	movw	r30, r28
    2788:	e8 5b       	subi	r30, 0xB8	; 184
    278a:	ff 4f       	sbci	r31, 0xFF	; 255
    278c:	10 82       	st	Z, r1
    278e:	11 82       	std	Z+1, r1	; 0x01
    2790:	12 82       	std	Z+2, r1	; 0x02
    2792:	13 82       	std	Z+3, r1	; 0x03
					operand_2     = 0 ;
    2794:	fe 01       	movw	r30, r28
    2796:	ec 5b       	subi	r30, 0xBC	; 188
    2798:	ff 4f       	sbci	r31, 0xFF	; 255
    279a:	10 82       	st	Z, r1
    279c:	11 82       	std	Z+1, r1	; 0x01
    279e:	12 82       	std	Z+2, r1	; 0x02
    27a0:	13 82       	std	Z+3, r1	; 0x03
					operator      = 0 ;
    27a2:	fe 01       	movw	r30, r28
    27a4:	ed 5b       	subi	r30, 0xBD	; 189
    27a6:	ff 4f       	sbci	r31, 0xFF	; 255
    27a8:	10 82       	st	Z, r1
					Result        = 0 ;
    27aa:	1a ae       	std	Y+58, r1	; 0x3a
    27ac:	1b ae       	std	Y+59, r1	; 0x3b
    27ae:	1c ae       	std	Y+60, r1	; 0x3c
    27b0:	1d ae       	std	Y+61, r1	; 0x3d
					Copy_u8Temp   = 0 ;
    27b2:	fe 01       	movw	r30, r28
    27b4:	fe 96       	adiw	r30, 0x3e	; 62
    27b6:	10 82       	st	Z, r1
    27b8:	11 82       	std	Z+1, r1	; 0x01
    27ba:	12 82       	std	Z+2, r1	; 0x02
    27bc:	13 82       	std	Z+3, r1	; 0x03
					operator_flag = 0 ;
    27be:	fe 01       	movw	r30, r28
    27c0:	ee 5b       	subi	r30, 0xBE	; 190
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	10 82       	st	Z, r1
					// Clear Display
					LCD_voidClearDisplay();
    27c6:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <LCD_voidClearDisplay>
    27ca:	ae ce       	rjmp	.-676    	; 0x2528 <main+0x436>
				}
				else
				{
					operator = Local_u8PressedKey ;
    27cc:	fe 01       	movw	r30, r28
    27ce:	ed 5b       	subi	r30, 0xBD	; 189
    27d0:	ff 4f       	sbci	r31, 0xFF	; 255
    27d2:	89 ad       	ldd	r24, Y+57	; 0x39
    27d4:	80 83       	st	Z, r24
					LCD_voidWriteChar(operator);
    27d6:	fe 01       	movw	r30, r28
    27d8:	ed 5b       	subi	r30, 0xBD	; 189
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	80 81       	ld	r24, Z
    27de:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <LCD_voidWriteChar>
					operator_flag = 1 ;
    27e2:	fe 01       	movw	r30, r28
    27e4:	ee 5b       	subi	r30, 0xBE	; 190
    27e6:	ff 4f       	sbci	r31, 0xFF	; 255
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	80 83       	st	Z, r24
					Copy_u8Temp = 0 ;
    27ec:	fe 01       	movw	r30, r28
    27ee:	fe 96       	adiw	r30, 0x3e	; 62
    27f0:	10 82       	st	Z, r1
    27f2:	11 82       	std	Z+1, r1	; 0x01
    27f4:	12 82       	std	Z+2, r1	; 0x02
    27f6:	13 82       	std	Z+3, r1	; 0x03
    27f8:	97 ce       	rjmp	.-722    	; 0x2528 <main+0x436>

000027fa <__mulsi3>:
    27fa:	62 9f       	mul	r22, r18
    27fc:	d0 01       	movw	r26, r0
    27fe:	73 9f       	mul	r23, r19
    2800:	f0 01       	movw	r30, r0
    2802:	82 9f       	mul	r24, r18
    2804:	e0 0d       	add	r30, r0
    2806:	f1 1d       	adc	r31, r1
    2808:	64 9f       	mul	r22, r20
    280a:	e0 0d       	add	r30, r0
    280c:	f1 1d       	adc	r31, r1
    280e:	92 9f       	mul	r25, r18
    2810:	f0 0d       	add	r31, r0
    2812:	83 9f       	mul	r24, r19
    2814:	f0 0d       	add	r31, r0
    2816:	74 9f       	mul	r23, r20
    2818:	f0 0d       	add	r31, r0
    281a:	65 9f       	mul	r22, r21
    281c:	f0 0d       	add	r31, r0
    281e:	99 27       	eor	r25, r25
    2820:	72 9f       	mul	r23, r18
    2822:	b0 0d       	add	r27, r0
    2824:	e1 1d       	adc	r30, r1
    2826:	f9 1f       	adc	r31, r25
    2828:	63 9f       	mul	r22, r19
    282a:	b0 0d       	add	r27, r0
    282c:	e1 1d       	adc	r30, r1
    282e:	f9 1f       	adc	r31, r25
    2830:	bd 01       	movw	r22, r26
    2832:	cf 01       	movw	r24, r30
    2834:	11 24       	eor	r1, r1
    2836:	08 95       	ret

00002838 <__udivmodsi4>:
    2838:	a1 e2       	ldi	r26, 0x21	; 33
    283a:	1a 2e       	mov	r1, r26
    283c:	aa 1b       	sub	r26, r26
    283e:	bb 1b       	sub	r27, r27
    2840:	fd 01       	movw	r30, r26
    2842:	0d c0       	rjmp	.+26     	; 0x285e <__udivmodsi4_ep>

00002844 <__udivmodsi4_loop>:
    2844:	aa 1f       	adc	r26, r26
    2846:	bb 1f       	adc	r27, r27
    2848:	ee 1f       	adc	r30, r30
    284a:	ff 1f       	adc	r31, r31
    284c:	a2 17       	cp	r26, r18
    284e:	b3 07       	cpc	r27, r19
    2850:	e4 07       	cpc	r30, r20
    2852:	f5 07       	cpc	r31, r21
    2854:	20 f0       	brcs	.+8      	; 0x285e <__udivmodsi4_ep>
    2856:	a2 1b       	sub	r26, r18
    2858:	b3 0b       	sbc	r27, r19
    285a:	e4 0b       	sbc	r30, r20
    285c:	f5 0b       	sbc	r31, r21

0000285e <__udivmodsi4_ep>:
    285e:	66 1f       	adc	r22, r22
    2860:	77 1f       	adc	r23, r23
    2862:	88 1f       	adc	r24, r24
    2864:	99 1f       	adc	r25, r25
    2866:	1a 94       	dec	r1
    2868:	69 f7       	brne	.-38     	; 0x2844 <__udivmodsi4_loop>
    286a:	60 95       	com	r22
    286c:	70 95       	com	r23
    286e:	80 95       	com	r24
    2870:	90 95       	com	r25
    2872:	9b 01       	movw	r18, r22
    2874:	ac 01       	movw	r20, r24
    2876:	bd 01       	movw	r22, r26
    2878:	cf 01       	movw	r24, r30
    287a:	08 95       	ret

0000287c <__prologue_saves__>:
    287c:	2f 92       	push	r2
    287e:	3f 92       	push	r3
    2880:	4f 92       	push	r4
    2882:	5f 92       	push	r5
    2884:	6f 92       	push	r6
    2886:	7f 92       	push	r7
    2888:	8f 92       	push	r8
    288a:	9f 92       	push	r9
    288c:	af 92       	push	r10
    288e:	bf 92       	push	r11
    2890:	cf 92       	push	r12
    2892:	df 92       	push	r13
    2894:	ef 92       	push	r14
    2896:	ff 92       	push	r15
    2898:	0f 93       	push	r16
    289a:	1f 93       	push	r17
    289c:	cf 93       	push	r28
    289e:	df 93       	push	r29
    28a0:	cd b7       	in	r28, 0x3d	; 61
    28a2:	de b7       	in	r29, 0x3e	; 62
    28a4:	ca 1b       	sub	r28, r26
    28a6:	db 0b       	sbc	r29, r27
    28a8:	0f b6       	in	r0, 0x3f	; 63
    28aa:	f8 94       	cli
    28ac:	de bf       	out	0x3e, r29	; 62
    28ae:	0f be       	out	0x3f, r0	; 63
    28b0:	cd bf       	out	0x3d, r28	; 61
    28b2:	09 94       	ijmp

000028b4 <__epilogue_restores__>:
    28b4:	2a 88       	ldd	r2, Y+18	; 0x12
    28b6:	39 88       	ldd	r3, Y+17	; 0x11
    28b8:	48 88       	ldd	r4, Y+16	; 0x10
    28ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    28bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    28be:	7d 84       	ldd	r7, Y+13	; 0x0d
    28c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    28c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    28c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    28c6:	b9 84       	ldd	r11, Y+9	; 0x09
    28c8:	c8 84       	ldd	r12, Y+8	; 0x08
    28ca:	df 80       	ldd	r13, Y+7	; 0x07
    28cc:	ee 80       	ldd	r14, Y+6	; 0x06
    28ce:	fd 80       	ldd	r15, Y+5	; 0x05
    28d0:	0c 81       	ldd	r16, Y+4	; 0x04
    28d2:	1b 81       	ldd	r17, Y+3	; 0x03
    28d4:	aa 81       	ldd	r26, Y+2	; 0x02
    28d6:	b9 81       	ldd	r27, Y+1	; 0x01
    28d8:	ce 0f       	add	r28, r30
    28da:	d1 1d       	adc	r29, r1
    28dc:	0f b6       	in	r0, 0x3f	; 63
    28de:	f8 94       	cli
    28e0:	de bf       	out	0x3e, r29	; 62
    28e2:	0f be       	out	0x3f, r0	; 63
    28e4:	cd bf       	out	0x3d, r28	; 61
    28e6:	ed 01       	movw	r28, r26
    28e8:	08 95       	ret

000028ea <_exit>:
    28ea:	f8 94       	cli

000028ec <__stop_program>:
    28ec:	ff cf       	rjmp	.-2      	; 0x28ec <__stop_program>
